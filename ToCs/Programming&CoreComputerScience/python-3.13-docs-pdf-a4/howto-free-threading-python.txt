    Python experimental support for free
                             threading
                                                                                               Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                    April 27, 2025
                                                                                  Python Software Foundation
                                                                                      Email: docs@python.org


Contents

1 Installation                                                                                                     2

2 Identifying free-threaded Python                                                                                 2

3 The global interpreter lock in free-threaded Python                                                              2

4 Thread safety                                                                                                    2

5 Known limitations                                                                                                2
  5.1 Immortalization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      3
  5.2 Frame objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      3
  5.3 Iterators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    3
  5.4 Single-threaded performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        3

Index                                                                                                              4



Starting with the 3.13 release, CPython has experimental support for a build of Python called free threading where
the global interpreter lock (GIL) is disabled. Free-threaded execution allows for full utilization of the available
processing power by running threads in parallel on available CPU cores. While not all software will benefit from this
automatically, programs designed with threading in mind will run faster on multi-core hardware.
The free-threaded mode is experimental and work is ongoing to improve it: expect some bugs and a substantial
single-threaded performance hit.
This document describes the implications of free threading for Python code. See freethreading-extensions-howto for
information on how to write C extensions that support the free-threaded build.


 µ See also

 PEP 703 – Making the Global Interpreter Lock Optional in CPython for an overall description of free-threaded
 Python.




                                                         1
