====================================
 File: c-api_toc.txt
====================================

                         The Python/C API
                                     Release 3.13.3




Guido van Rossum and the Python development team




                                           April 27, 2025




                              Python Software Foundation
                                  Email: docs@python.org
                                                                                              CONTENTS




1 Introduction                                                                                                   3
  1.1 Coding standards . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     3
  1.2 Include Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    3
  1.3 Useful macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      4
  1.4 Objects, Types and Reference Counts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        6
        1.4.1 Reference Counts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       7
        1.4.2 Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     10
  1.5 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    10
  1.6 Embedding Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      12
  1.7 Debugging Builds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    12

2 C API Stability                                                                                               13
  2.1 Unstable C API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    13
  2.2 Stable Application Binary Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     13
       2.2.1 Limited C API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        13
       2.2.2 Stable ABI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     14
       2.2.3 Limited API Scope and Performance . . . . . . . . . . . . . . . . . . . . . . . . . . . .          14
       2.2.4 Limited API Caveats . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        14
  2.3 Platform Considerations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     15
  2.4 Contents of Limited API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     15

3 The Very High Level Layer                                                                                     41

4 Reference Counting                                                                                            45

5 Exception Handling                                                                                            49
  5.1 Printing and clearing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   49
  5.2 Raising exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    50
  5.3 Issuing warnings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    52
  5.4 Querying the error indicator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    53
  5.5 Signal Handling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   56
  5.6 Exception Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   57
  5.7 Exception Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     58
  5.8 Unicode Exception Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     59
  5.9 Recursion Control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     60
  5.10 Standard Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    60
  5.11 Standard Warning Categories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    62

6 Utilities                                                                                                     63
  6.1 Operating System Utilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    63
  6.2 System Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    66
  6.3 Process Control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   67
  6.4 Importing Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     68
  6.5 Data marshalling support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    72
  6.6 Parsing arguments and building values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     73


                                                                                                                 i
          6.6.1 Parsing arguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       73
          6.6.2 Building values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       79
     6.7 String conversion and formatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     81
     6.8 PyHash API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       83
     6.9 Reflection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   84
     6.10 Codec registry and support functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    85
          6.10.1 Codec lookup API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       86
          6.10.2 Registry API for Unicode encoding error handlers . . . . . . . . . . . . . . . . . . . . .         86
     6.11 PyTime C API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      87
          6.11.1 Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      87
          6.11.2 Clock Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      87
          6.11.3 Raw Clock Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        88
          6.11.4 Conversion functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       88
     6.12 Support for Perf Maps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     88

7 Abstract Objects Layer                                                                                       91
  7.1 Object Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
  7.2 Call Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
       7.2.1 The tp_call Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
       7.2.2 The Vectorcall Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
       7.2.3 Object Calling API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
       7.2.4 Call Support API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
  7.3 Number Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
  7.4 Sequence Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
  7.5 Mapping Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
  7.6 Iterator Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
  7.7 Buffer Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
       7.7.1 Buffer structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
       7.7.2 Buffer request types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112
       7.7.3 Complex arrays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
       7.7.4 Buffer-related functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115

8 Concrete Objects Layer                                                                                      117
  8.1 Fundamental Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
       8.1.1 Type Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
       8.1.2 The None Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
  8.2 Numeric Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
       8.2.1 Integer Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
       8.2.2 Boolean Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
       8.2.3 Floating-Point Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
       8.2.4 Complex Number Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
  8.3 Sequence Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134
       8.3.1 Bytes Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134
       8.3.2 Byte Array Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135
       8.3.3 Unicode Objects and Codecs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 136
       8.3.4 Tuple Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
       8.3.5 Struct Sequence Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156
       8.3.6 List Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 157
  8.4 Container Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
       8.4.1 Dictionary Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
       8.4.2 Set Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
  8.5 Function Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
       8.5.1 Function Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
       8.5.2 Instance Method Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 167
       8.5.3 Method Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168
       8.5.4 Cell Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168
       8.5.5 Code Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 169
       8.5.6 Extra information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172



ii
   8.6    Other Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
          8.6.1 File Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
          8.6.2 Module Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
          8.6.3 Iterator Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
          8.6.4 Descriptor Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
          8.6.5 Slice Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
          8.6.6 MemoryView objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185
          8.6.7 Weak Reference Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 185
          8.6.8 Capsules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
          8.6.9 Frame Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
          8.6.10 Generator Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
          8.6.11 Coroutine Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
          8.6.12 Context Variables Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 192
          8.6.13 DateTime Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 193
          8.6.14 Objects for Type Hinting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197

9 Initialization, Finalization, and Threads                                                                     199
  9.1 Before Python Initialization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199
  9.2 Global configuration variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 200
  9.3 Initializing and finalizing the interpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 203
  9.4 Process-wide parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
  9.5 Thread State and the Global Interpreter Lock . . . . . . . . . . . . . . . . . . . . . . . . . . . . 209
         9.5.1 Releasing the GIL from extension code . . . . . . . . . . . . . . . . . . . . . . . . . . . 209
         9.5.2 Non-Python created threads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210
         9.5.3 Cautions about fork() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210
         9.5.4 High-level API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 211
         9.5.5 Low-level API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 213
  9.6 Sub-interpreter support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 216
         9.6.1 A Per-Interpreter GIL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 218
         9.6.2 Bugs and caveats . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219
  9.7 Asynchronous Notifications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 219
  9.8 Profiling and Tracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 220
  9.9 Reference tracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 221
  9.10 Advanced Debugger Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222
  9.11 Thread Local Storage Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222
         9.11.1 Thread Specific Storage (TSS) API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 223
         9.11.2 Thread Local Storage (TLS) API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 224
  9.12 Synchronization Primitives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225
         9.12.1 Python Critical Section API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 225

10 Python Initialization Configuration                                                                           227
   10.1 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227
   10.2 PyWideStringList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228
   10.3 PyStatus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 228
   10.4 PyPreConfig . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230
   10.5 Preinitialize Python with PyPreConfig . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
   10.6 PyConfig . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232
   10.7 Initialization with PyConfig . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243
   10.8 Isolated Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245
   10.9 Python Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245
   10.10 Python Path Configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245
   10.11 Py_GetArgcArgv() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246
   10.12 Multi-Phase Initialization Private Provisional API . . . . . . . . . . . . . . . . . . . . . . . . . . 247

11 Memory Management                                                                                           249
   11.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249
   11.2 Allocator Domains . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250
   11.3 Raw Memory Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 250
   11.4 Memory Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 251


                                                                                                                  iii
     11.5  Object allocators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 252
     11.6  Default Memory Allocators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
     11.7  Customize Memory Allocators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 254
     11.8  Debug hooks on the Python memory allocators . . . . . . . . . . . . . . . . . . . . . . . . . . . 255
     11.9  The pymalloc allocator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257
           11.9.1 Customize pymalloc Arena Allocator . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257
     11.10 The mimalloc allocator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257
     11.11 tracemalloc C API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257
     11.12 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258

12 Object Implementation Support                                                                               259
   12.1 Allocating Objects on the Heap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 259
   12.2 Common Object Structures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260
        12.2.1 Base object types and macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260
        12.2.2 Implementing functions and methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
        12.2.3 Accessing attributes of extension types . . . . . . . . . . . . . . . . . . . . . . . . . . . 265
   12.3 Type Object Structures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268
        12.3.1 Quick Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269
        12.3.2 PyTypeObject Definition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 273
        12.3.3 PyObject Slots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 274
        12.3.4 PyVarObject Slots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275
        12.3.5 PyTypeObject Slots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275
        12.3.6 Static Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 294
        12.3.7 Heap Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
        12.3.8 Number Object Structures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
        12.3.9 Mapping Object Structures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297
        12.3.10 Sequence Object Structures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297
        12.3.11 Buffer Object Structures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 298
        12.3.12 Async Object Structures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 299
        12.3.13 Slot Type typedefs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 300
        12.3.14 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301
   12.4 Supporting Cyclic Garbage Collection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304
        12.4.1 Controlling the Garbage Collector State . . . . . . . . . . . . . . . . . . . . . . . . . . . 306
        12.4.2 Querying Garbage Collector State . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 307

13 API and ABI Versioning                                                                                         309

14 Monitoring C API                                                                                               311

15 Generating Execution Events                                                                                313
   15.1 Managing the Monitoring State . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314

A Glossary                                                                                                        317

B About this documentation                                                                                 335
  B.1 Contributors to the Python documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335

C History and License                                                                                         337
  C.1 History of the software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 337
  C.2 Terms and conditions for accessing or otherwise using Python . . . . . . . . . . . . . . . . . . . . 338
        C.2.1 PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2 . . . . . . . . . . . . . 338
        C.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0 . . . . . . . . . . . . . . 339
        C.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1 . . . . . . . . . . . . . . . . . . 339
        C.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2 . . . . . . . . . . 340
        C.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION . 341
  C.3 Licenses and Acknowledgements for Incorporated Software . . . . . . . . . . . . . . . . . . . . . 341
        C.3.1 Mersenne Twister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341
        C.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 342
        C.3.3 Asynchronous socket services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343


iv
        C.3.4    Cookie management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343
        C.3.5    Execution tracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343
        C.3.6    UUencode and UUdecode functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 344
        C.3.7    XML Remote Procedure Calls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 345
        C.3.8    test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 345
        C.3.9    Select kqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346
        C.3.10   SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346
        C.3.11   strtod and dtoa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347
        C.3.12   OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347
        C.3.13   expat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 350
        C.3.14   libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351
        C.3.15   zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 351
        C.3.16   cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 352
        C.3.17   libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 352
        C.3.18   W3C C14N test suite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 353
        C.3.19   mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354
        C.3.20   asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354
        C.3.21   Global Unbounded Sequences (GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 354

D Copyright                                                                                                      357

Index                                                                                                            359




                                                                                                                   v
vi
                                                                          The Python/C API, Release 3.13.3


This manual documents the API used by C and C++ programmers who want to write extension modules or embed
Python. It is a companion to extending-index, which describes the general principles of extension writing but does
not document the API functions in detail.




CONTENTS                                                                                                        1
The Python/C API, Release 3.13.3




2                                  CONTENTS

====================================
End of c-api_toc.txt
====================================

====================================
 File: extending_toc.txt
====================================

    Extending and Embedding Python
                                     Release 3.13.3




Guido van Rossum and the Python development team




                                           April 27, 2025




                              Python Software Foundation
                                  Email: docs@python.org
                                                                                             CONTENTS




1 Recommended third party tools                                                                                3

2 Creating extensions without third party tools                                                                 5
  2.1 Extending Python with C or C++ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      5
        2.1.1 A Simple Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        5
        2.1.2 Intermezzo: Errors and Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       6
        2.1.3 Back to the Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       8
        2.1.4 The Module’s Method Table and Initialization Function . . . . . . . . . . . . . . . . . .         9
        2.1.5 Compilation and Linkage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      11
        2.1.6 Calling Python Functions from C . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      11
        2.1.7 Extracting Parameters in Extension Functions . . . . . . . . . . . . . . . . . . . . . . .       13
        2.1.8 Keyword Parameters for Extension Functions . . . . . . . . . . . . . . . . . . . . . . . .       14
        2.1.9 Building Arbitrary Values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    16
        2.1.10 Reference Counts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    16
        2.1.11 Writing Extensions in C++ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     20
        2.1.12 Providing a C API for an Extension Module . . . . . . . . . . . . . . . . . . . . . . . .       20
  2.2 Defining Extension Types: Tutorial . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   23
        2.2.1 The Basics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   23
        2.2.2 Adding data and methods to the Basic example . . . . . . . . . . . . . . . . . . . . . . .       27
        2.2.3 Providing finer control over data attributes . . . . . . . . . . . . . . . . . . . . . . . . .   34
        2.2.4 Supporting cyclic garbage collection . . . . . . . . . . . . . . . . . . . . . . . . . . . .     39
        2.2.5 Subclassing other types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    44
  2.3 Defining Extension Types: Assorted Topics . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      46
        2.3.1 Finalization and De-allocation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   49
        2.3.2 Object Presentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    50
        2.3.3 Attribute Management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       51
        2.3.4 Object Comparison . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      53
        2.3.5 Abstract Protocol Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    53
        2.3.6 Weak Reference Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       55
        2.3.7 More Suggestions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     55
  2.4 Building C and C++ Extensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      56
        2.4.1 Building C and C++ Extensions with setuptools . . . . . . . . . . . . . . . . . . . . . . .      56
  2.5 Building C and C++ Extensions on Windows . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       56
        2.5.1 A Cookbook Approach . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        57
        2.5.2 Differences Between Unix and Windows . . . . . . . . . . . . . . . . . . . . . . . . . .         57
        2.5.3 Using DLLs in Practice . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     58

3 Embedding the CPython runtime in a larger application                                                        59
  3.1 Embedding Python in Another Application . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        59
      3.1.1 Very High Level Embedding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          59
      3.1.2 Beyond Very High Level Embedding: An overview . . . . . . . . . . . . . . . . . . . . .            60
      3.1.3 Pure Embedding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       61
      3.1.4 Extending Embedded Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          63
      3.1.5 Embedding Python in C++ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          64


                                                                                                                i
          3.1.6    Compiling and Linking under Unix-like systems . . . . . . . . . . . . . . . . . . . . . .    64

A Glossary                                                                                                      67

B About this documentation                                                                                      85
  B.1 Contributors to the Python documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      85

C History and License                                                                                            87
  C.1 History of the software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87
  C.2 Terms and conditions for accessing or otherwise using Python . . . . . . . . . . . . . . . . . . . . 88
        C.2.1 PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2 . . . . . . . . . . . . . 88
        C.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0 . . . . . . . . . . . . . . 89
        C.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1 . . . . . . . . . . . . . . . . . . 89
        C.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2 . . . . . . . . . . 90
        C.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION . 91
  C.3 Licenses and Acknowledgements for Incorporated Software . . . . . . . . . . . . . . . . . . . . . 91
        C.3.1 Mersenne Twister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91
        C.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92
        C.3.3 Asynchronous socket services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
        C.3.4 Cookie management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
        C.3.5 Execution tracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
        C.3.6 UUencode and UUdecode functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 94
        C.3.7 XML Remote Procedure Calls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
        C.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
        C.3.9 Select kqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
        C.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96
        C.3.11 strtod and dtoa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
        C.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
        C.3.13 expat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
        C.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
        C.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
        C.3.16 cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
        C.3.17 libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
        C.3.18 W3C C14N test suite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
        C.3.19 mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
        C.3.20 asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
        C.3.21 Global Unbounded Sequences (GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104

D Copyright                                                                                                    107

Index                                                                                                          109




ii
                                                        Extending and Embedding Python, Release 3.13.3


This document describes how to write modules in C or C++ to extend the Python interpreter with new modules.
Those modules can not only define new functions but also new object types and their methods. The document also
describes how to embed the Python interpreter in another application, for use as an extension language. Finally,
it shows how to compile and link extension modules so that they can be loaded dynamically (at run time) into the
interpreter, if the underlying operating system supports this feature.
This document assumes basic knowledge about Python. For an informal introduction to the language, see tutorial-
index. reference-index gives a more formal definition of the language. library-index documents the existing object
types, functions and modules (both built-in and written in Python) that give the language its wide application range.
For a detailed description of the whole Python/C API, see the separate c-api-index.




CONTENTS                                                                                                           1
Extending and Embedding Python, Release 3.13.3




2                                                CONTENTS

====================================
End of extending_toc.txt
====================================

====================================
 File: faq_toc.txt
====================================

 Python Frequently Asked Questions
                                     Release 3.13.3




Guido van Rossum and the Python development team




                                           April 27, 2025




                              Python Software Foundation
                                  Email: docs@python.org
                                                                                             CONTENTS




1 General Python FAQ                                                                                           1
  1.1 General Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    1
       1.1.1 What is Python? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     1
       1.1.2 What is the Python Software Foundation? . . . . . . . . . . . . . . . . . . . . . . . . .         1
       1.1.3 Are there copyright restrictions on the use of Python? . . . . . . . . . . . . . . . . . . .      1
       1.1.4 Why was Python created in the first place? . . . . . . . . . . . . . . . . . . . . . . . . .      1
       1.1.5 What is Python good for? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      2
       1.1.6 How does the Python version numbering scheme work? . . . . . . . . . . . . . . . . . .            2
       1.1.7 How do I obtain a copy of the Python source? . . . . . . . . . . . . . . . . . . . . . . .        3
       1.1.8 How do I get documentation on Python? . . . . . . . . . . . . . . . . . . . . . . . . . .         3
       1.1.9 I’ve never programmed before. Is there a Python tutorial? . . . . . . . . . . . . . . . . .       3
       1.1.10 Is there a newsgroup or mailing list devoted to Python? . . . . . . . . . . . . . . . . . . .    3
       1.1.11 How do I get a beta test version of Python? . . . . . . . . . . . . . . . . . . . . . . . . .    3
       1.1.12 How do I submit bug reports and patches for Python? . . . . . . . . . . . . . . . . . . .        3
       1.1.13 Are there any published articles about Python that I can reference? . . . . . . . . . . . .      3
       1.1.14 Are there any books on Python? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       4
       1.1.15 Where in the world is www.python.org located? . . . . . . . . . . . . . . . . . . . . . .        4
       1.1.16 Why is it called Python? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   4
       1.1.17 Do I have to like “Monty Python’s Flying Circus”? . . . . . . . . . . . . . . . . . . . . .      4
  1.2 Python in the real world . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   4
       1.2.1 How stable is Python? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     4
       1.2.2 How many people are using Python? . . . . . . . . . . . . . . . . . . . . . . . . . . . .         4
       1.2.3 Have any significant projects been done in Python? . . . . . . . . . . . . . . . . . . . . .      4
       1.2.4 What new developments are expected for Python in the future? . . . . . . . . . . . . . .          4
       1.2.5 Is it reasonable to propose incompatible changes to Python? . . . . . . . . . . . . . . . .       5
       1.2.6 Is Python a good language for beginning programmers? . . . . . . . . . . . . . . . . . .          5

2 Programming FAQ                                                                                               7
  2.1 General Questions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     7
       2.1.1 Is there a source code level debugger with breakpoints, single-stepping, etc.? . . . . . . .       7
       2.1.2 Are there tools to help find bugs or perform static analysis? . . . . . . . . . . . . . . . .      7
       2.1.3 How can I create a stand-alone binary from a Python script? . . . . . . . . . . . . . . . .        7
       2.1.4 Are there coding standards or a style guide for Python programs? . . . . . . . . . . . . .         8
  2.2 Core Language . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     8
       2.2.1 Why am I getting an UnboundLocalError when the variable has a value? . . . . . . . . .             8
       2.2.2 What are the rules for local and global variables in Python? . . . . . . . . . . . . . . . .       9
       2.2.3 Why do lambdas defined in a loop with different values all return the same result? . . . . .       9
       2.2.4 How do I share global variables across modules? . . . . . . . . . . . . . . . . . . . . . .       10
       2.2.5 What are the “best practices” for using import in a module? . . . . . . . . . . . . . . . .       10
       2.2.6 Why are default values shared between objects? . . . . . . . . . . . . . . . . . . . . . .        11
       2.2.7 How can I pass optional or keyword parameters from one function to another? . . . . . .           12
       2.2.8 What is the difference between arguments and parameters? . . . . . . . . . . . . . . . .          12
       2.2.9 Why did changing list ‘y’ also change list ‘x’? . . . . . . . . . . . . . . . . . . . . . . . .   12
       2.2.10 How do I write a function with output parameters (call by reference)? . . . . . . . . . . .      13


                                                                                                                i
           2.2.11 How do you make a higher order function in Python? . . . . . . . . . . . . . . . . . . .           14
           2.2.12 How do I copy an object in Python? . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       15
           2.2.13 How can I find the methods or attributes of an object? . . . . . . . . . . . . . . . . . . .       15
           2.2.14 How can my code discover the name of an object? . . . . . . . . . . . . . . . . . . . . .          16
           2.2.15 What’s up with the comma operator’s precedence? . . . . . . . . . . . . . . . . . . . . .          16
           2.2.16 Is there an equivalent of C’s “?:” ternary operator? . . . . . . . . . . . . . . . . . . . . .     16
           2.2.17 Is it possible to write obfuscated one-liners in Python? . . . . . . . . . . . . . . . . . . .     17
           2.2.18 What does the slash(/) in the parameter list of a function mean? . . . . . . . . . . . . . .       17
     2.3   Numbers and strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     18
           2.3.1 How do I specify hexadecimal and octal integers? . . . . . . . . . . . . . . . . . . . . .          18
           2.3.2 Why does -22 // 10 return -3? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       18
           2.3.3 How do I get int literal attribute instead of SyntaxError? . . . . . . . . . . . . . . . . . .      18
           2.3.4 How do I convert a string to a number? . . . . . . . . . . . . . . . . . . . . . . . . . . .        18
           2.3.5 How do I convert a number to a string? . . . . . . . . . . . . . . . . . . . . . . . . . . .        19
           2.3.6 How do I modify a string in place? . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        19
           2.3.7 How do I use strings to call functions/methods? . . . . . . . . . . . . . . . . . . . . . . .       19
           2.3.8 Is there an equivalent to Perl’s chomp() for removing trailing newlines from strings? . . .         20
           2.3.9 Is there a scanf() or sscanf() equivalent? . . . . . . . . . . . . . . . . . . . . . . .            20
           2.3.10 What does UnicodeDecodeError or UnicodeEncodeError error mean? . . . . . . .                       21
           2.3.11 Can I end a raw string with an odd number of backslashes? . . . . . . . . . . . . . . . .          21
     2.4   Performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     21
           2.4.1 My program is too slow. How do I speed it up? . . . . . . . . . . . . . . . . . . . . . . .         21
           2.4.2 What is the most efficient way to concatenate many strings together? . . . . . . . . . . . .        22
     2.5   Sequences (Tuples/Lists) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    22
           2.5.1 How do I convert between tuples and lists? . . . . . . . . . . . . . . . . . . . . . . . . .        22
           2.5.2 What’s a negative index? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        23
           2.5.3 How do I iterate over a sequence in reverse order? . . . . . . . . . . . . . . . . . . . . .        23
           2.5.4 How do you remove duplicates from a list? . . . . . . . . . . . . . . . . . . . . . . . . .         23
           2.5.5 How do you remove multiple items from a list . . . . . . . . . . . . . . . . . . . . . . .          23
           2.5.6 How do you make an array in Python? . . . . . . . . . . . . . . . . . . . . . . . . . . .           23
           2.5.7 How do I create a multidimensional list? . . . . . . . . . . . . . . . . . . . . . . . . . .        24
           2.5.8 How do I apply a method or function to a sequence of objects? . . . . . . . . . . . . . . .         24
           2.5.9 Why does a_tuple[i] += [‘item’] raise an exception when the addition works? . . . . . . .           25
           2.5.10 I want to do a complicated sort: can you do a Schwartzian Transform in Python? . . . . .           26
           2.5.11 How can I sort one list by values from another list? . . . . . . . . . . . . . . . . . . . . .     26
     2.6   Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   26
           2.6.1 What is a class? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      26
           2.6.2 What is a method? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       27
           2.6.3 What is self? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       27
           2.6.4 How do I check if an object is an instance of a given class or of a subclass of it? . . . . . .     27
           2.6.5 What is delegation? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       28
           2.6.6 How do I call a method defined in a base class from a derived class that extends it? . . . .        29
           2.6.7 How can I organize my code to make it easier to change the base class? . . . . . . . . . .          29
           2.6.8 How do I create static class data and static class methods? . . . . . . . . . . . . . . . . .       29
           2.6.9 How can I overload constructors (or methods) in Python? . . . . . . . . . . . . . . . . .           30
           2.6.10 I try to use __spam and I get an error about _SomeClassName__spam. . . . . . . . . . .             30
           2.6.11 My class defines __del__ but it is not called when I delete the object. . . . . . . . . . . .      31
           2.6.12 How do I get a list of all instances of a given class? . . . . . . . . . . . . . . . . . . . . .   31
           2.6.13 Why does the result of id() appear to be not unique? . . . . . . . . . . . . . . . . . . .         31
           2.6.14 When can I rely on identity tests with the is operator? . . . . . . . . . . . . . . . . . . .      32
           2.6.15 How can a subclass control what data is stored in an immutable instance? . . . . . . . . .         33
           2.6.16 How do I cache method calls? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       34
     2.7   Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   35
           2.7.1 How do I create a .pyc file? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      35
           2.7.2 How do I find the current module name? . . . . . . . . . . . . . . . . . . . . . . . . . .          35
           2.7.3 How can I have modules that mutually import each other? . . . . . . . . . . . . . . . . .           36
           2.7.4 __import__(‘x.y.z’) returns <module ‘x’>; how do I get z? . . . . . . . . . . . . . . . . .         36



ii
          2.7.5    When I edit an imported module and reimport it, the changes don’t show up. Why does
                   this happen? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   37

3 Design and History FAQ                                                                                            39
  3.1 Why does Python use indentation for grouping of statements? . . . . . . . . . . . . . . . . . . . .           39
  3.2 Why am I getting strange results with simple arithmetic operations? . . . . . . . . . . . . . . . . .         39
  3.3 Why are floating-point calculations so inaccurate? . . . . . . . . . . . . . . . . . . . . . . . . . .        39
  3.4 Why are Python strings immutable? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           40
  3.5 Why must ‘self’ be used explicitly in method definitions and calls? . . . . . . . . . . . . . . . . . .       40
  3.6 Why can’t I use an assignment in an expression? . . . . . . . . . . . . . . . . . . . . . . . . . . .         41
  3.7 Why does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g.
       len(list))? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    41
  3.8 Why is join() a string method instead of a list or tuple method? . . . . . . . . . . . . . . . . . . .        41
  3.9 How fast are exceptions? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        42
  3.10 Why isn’t there a switch or case statement in Python? . . . . . . . . . . . . . . . . . . . . . . . .        42
  3.11 Can’t you emulate threads in the interpreter instead of relying on an OS-specific thread implemen-
       tation? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      43
  3.12 Why can’t lambda expressions contain statements? . . . . . . . . . . . . . . . . . . . . . . . . . .         43
  3.13 Can Python be compiled to machine code, C or some other language? . . . . . . . . . . . . . . .              43
  3.14 How does Python manage memory? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .             43
  3.15 Why doesn’t CPython use a more traditional garbage collection scheme? . . . . . . . . . . . . . .            44
  3.16 Why isn’t all memory freed when CPython exits? . . . . . . . . . . . . . . . . . . . . . . . . . .           44
  3.17 Why are there separate tuple and list data types? . . . . . . . . . . . . . . . . . . . . . . . . . . .      44
  3.18 How are lists implemented in CPython? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          44
  3.19 How are dictionaries implemented in CPython? . . . . . . . . . . . . . . . . . . . . . . . . . . .           44
  3.20 Why must dictionary keys be immutable? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           45
  3.21 Why doesn’t list.sort() return the sorted list? . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    46
  3.22 How do you specify and enforce an interface spec in Python? . . . . . . . . . . . . . . . . . . . .          46
  3.23 Why is there no goto? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        46
  3.24 Why can’t raw strings (r-strings) end with a backslash? . . . . . . . . . . . . . . . . . . . . . . .        47
  3.25 Why doesn’t Python have a “with” statement for attribute assignments? . . . . . . . . . . . . . . .          47
  3.26 Why don’t generators support the with statement? . . . . . . . . . . . . . . . . . . . . . . . . . .         48
  3.27 Why are colons required for the if/while/def/class statements? . . . . . . . . . . . . . . . . . . . .       48
  3.28 Why does Python allow commas at the end of lists and tuples? . . . . . . . . . . . . . . . . . . .           49

4 Library and Extension FAQ                                                                                         51
  4.1 General Library Questions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         51
       4.1.1 How do I find a module or application to perform task X? . . . . . . . . . . . . . . . . .             51
       4.1.2 Where is the math.py (socket.py, regex.py, etc.) source file? . . . . . . . . . . . . . . . .          51
       4.1.3 How do I make a Python script executable on Unix? . . . . . . . . . . . . . . . . . . . .              51
       4.1.4 Is there a curses/termcap package for Python? . . . . . . . . . . . . . . . . . . . . . . .            52
       4.1.5 Is there an equivalent to C’s onexit() in Python? . . . . . . . . . . . . . . . . . . . . . .          52
       4.1.6 Why don’t my signal handlers work? . . . . . . . . . . . . . . . . . . . . . . . . . . . .             52
  4.2 Common tasks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          52
       4.2.1 How do I test a Python program or component? . . . . . . . . . . . . . . . . . . . . . .               52
       4.2.2 How do I create documentation from doc strings? . . . . . . . . . . . . . . . . . . . . .              53
       4.2.3 How do I get a single keypress at a time? . . . . . . . . . . . . . . . . . . . . . . . . . .          53
  4.3 Threads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       53
       4.3.1 How do I program using threads? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            53
       4.3.2 None of my threads seem to run: why? . . . . . . . . . . . . . . . . . . . . . . . . . . .             53
       4.3.3 How do I parcel out work among a bunch of worker threads? . . . . . . . . . . . . . . .                54
       4.3.4 What kinds of global value mutation are thread-safe? . . . . . . . . . . . . . . . . . . . .           55
       4.3.5 Can’t we get rid of the Global Interpreter Lock? . . . . . . . . . . . . . . . . . . . . . .           55
  4.4 Input and Output . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        56
       4.4.1 How do I delete a file? (And other file questions…) . . . . . . . . . . . . . . . . . . . .            56
       4.4.2 How do I copy a file? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          56
       4.4.3 How do I read (or write) binary data? . . . . . . . . . . . . . . . . . . . . . . . . . . . .          56
       4.4.4 I can’t seem to use os.read() on a pipe created with os.popen(); why? . . . . . . . . . . . .          57



                                                                                                                    iii
           4.4.5 How do I access the serial (RS232) port? . . . . . . . . . . . . . . . . . . . . . . . . . .        57
           4.4.6 Why doesn’t closing sys.stdout (stdin, stderr) really close it? . . . . . . . . . . . . . . . .     57
     4.5   Network/Internet Programming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        57
           4.5.1 What WWW tools are there for Python? . . . . . . . . . . . . . . . . . . . . . . . . . .            57
           4.5.2 What module should I use to help with generating HTML? . . . . . . . . . . . . . . . . .            58
           4.5.3 How do I send mail from a Python script? . . . . . . . . . . . . . . . . . . . . . . . . .          58
           4.5.4 How do I avoid blocking in the connect() method of a socket? . . . . . . . . . . . . . . .          58
     4.6   Databases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   59
           4.6.1 Are there any interfaces to database packages in Python? . . . . . . . . . . . . . . . . . .        59
           4.6.2 How do you implement persistent objects in Python? . . . . . . . . . . . . . . . . . . . .          59
     4.7   Mathematics and Numerics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      59
           4.7.1 How do I generate random numbers in Python? . . . . . . . . . . . . . . . . . . . . . . .           59

5 Extending/Embedding FAQ                                                                                            61
  5.1 Can I create my own functions in C? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          61
  5.2 Can I create my own functions in C++? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            61
  5.3 Writing C is hard; are there any alternatives? . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       61
  5.4 How can I execute arbitrary Python statements from C? . . . . . . . . . . . . . . . . . . . . . . .            61
  5.5 How can I evaluate an arbitrary Python expression from C? . . . . . . . . . . . . . . . . . . . . .            61
  5.6 How do I extract C values from a Python object? . . . . . . . . . . . . . . . . . . . . . . . . . .            61
  5.7 How do I use Py_BuildValue() to create a tuple of arbitrary length? . . . . . . . . . . . . . . . . .          62
  5.8 How do I call an object’s method from C? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           62
  5.9 How do I catch the output from PyErr_Print() (or anything that prints to stdout/stderr)? . . . . . .           62
  5.10 How do I access a module written in Python from C? . . . . . . . . . . . . . . . . . . . . . . . .            63
  5.11 How do I interface to C++ objects from Python? . . . . . . . . . . . . . . . . . . . . . . . . . . .          63
  5.12 I added a module using the Setup file and the make fails; why? . . . . . . . . . . . . . . . . . . .          63
  5.13 How do I debug an extension? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          63
  5.14 I want to compile a Python module on my Linux system, but some files are missing. Why? . . . . .              64
  5.15 How do I tell “incomplete input” from “invalid input”? . . . . . . . . . . . . . . . . . . . . . . .          64
  5.16 How do I find undefined g++ symbols __builtin_new or __pure_virtual? . . . . . . . . . . . . . .              64
  5.17 Can I create an object class with some methods implemented in C and others in Python (e.g. through
       inheritance)? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       64

6 Python on Windows FAQ                                                                                              65
  6.1 How do I run a Python program under Windows? . . . . . . . . . . . . . . . . . . . . . . . . . .               65
  6.2 How do I make Python scripts executable? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           66
  6.3 Why does Python sometimes take so long to start? . . . . . . . . . . . . . . . . . . . . . . . . . .           66
  6.4 How do I make an executable from a Python script? . . . . . . . . . . . . . . . . . . . . . . . . .            66
  6.5 Is a *.pyd file the same as a DLL? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           66
  6.6 How can I embed Python into a Windows application? . . . . . . . . . . . . . . . . . . . . . . .               67
  6.7 How do I keep editors from inserting tabs into my Python source? . . . . . . . . . . . . . . . . .             68
  6.8 How do I check for a keypress without blocking? . . . . . . . . . . . . . . . . . . . . . . . . . .            68
  6.9 How do I solve the missing api-ms-win-crt-runtime-l1-1-0.dll error? . . . . . . . . . . . . . . . .            68

7 Graphic User Interface FAQ                                                                                         69
  7.1 General GUI Questions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          69
  7.2 What GUI toolkits exist for Python? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          69
  7.3 Tkinter questions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        69
       7.3.1 How do I freeze Tkinter applications? . . . . . . . . . . . . . . . . . . . . . . . . . . . .           69
       7.3.2 Can I have Tk events handled while waiting for I/O? . . . . . . . . . . . . . . . . . . . .             69
       7.3.3 I can’t get key bindings to work in Tkinter: why? . . . . . . . . . . . . . . . . . . . . . .           69

8 “Why is Python Installed on my Computer?” FAQ                                                                      71
  8.1 What is Python? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          71
  8.2 Why is Python installed on my machine? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           71
  8.3 Can I delete Python? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         71

A Glossary                                                                                                           73



iv
B About this documentation                                                                                      91
  B.1 Contributors to the Python documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      91

C History and License                                                                                            93
  C.1 History of the software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 93
  C.2 Terms and conditions for accessing or otherwise using Python . . . . . . . . . . . . . . . . . . . . 94
        C.2.1 PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2 . . . . . . . . . . . . . 94
        C.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0 . . . . . . . . . . . . . . 95
        C.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1 . . . . . . . . . . . . . . . . . . 95
        C.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2 . . . . . . . . . . 96
        C.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION . 97
  C.3 Licenses and Acknowledgements for Incorporated Software . . . . . . . . . . . . . . . . . . . . . 97
        C.3.1 Mersenne Twister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
        C.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 98
        C.3.3 Asynchronous socket services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
        C.3.4 Cookie management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
        C.3.5 Execution tracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
        C.3.6 UUencode and UUdecode functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
        C.3.7 XML Remote Procedure Calls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
        C.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
        C.3.9 Select kqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
        C.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
        C.3.11 strtod and dtoa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
        C.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
        C.3.13 expat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
        C.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
        C.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
        C.3.16 cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
        C.3.17 libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
        C.3.18 W3C C14N test suite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
        C.3.19 mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
        C.3.20 asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
        C.3.21 Global Unbounded Sequences (GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110

D Copyright                                                                                                    113

Index                                                                                                          115




                                                                                                                 v
vi

====================================
End of faq_toc.txt
====================================

====================================
 File: howto-annotations_toc.txt
====================================

                                     Annotations Best Practices
                                                                                                    Release 3.13.3


                         Guido van Rossum and the Python development team


                                                                                                         April 27, 2025
                                                                                      Python Software Foundation
                                                                                          Email: docs@python.org


Contents

1 Accessing The Annotations Dict Of An Object In Python 3.10 And Newer                                                     1

2 Accessing The Annotations Dict Of An Object In Python 3.9 And Older                                                      2

3 Manually Un-Stringizing Stringized Annotations                                                                           3

4 Best Practices For __annotations__ In Any Python Version                                                                 3

5    __annotations__ Quirks                                                                                                3

Index                                                                                                                      5



        author
             Larry Hastings


    Abstract

    This document is designed to encapsulate the best practices for working with annotations dicts. If you write
    Python code that examines __annotations__ on Python objects, we encourage you to follow the guidelines
    described below.
    The document is organized into four sections: best practices for accessing the annotations of an object in Python
    versions 3.10 and newer, best practices for accessing the annotations of an object in Python versions 3.9 and older,
    other best practices for __annotations__ that apply to any Python version, and quirks of __annotations__.
    Note that this document is specifically about working with __annotations__, not uses for annotations. If
    you’re looking for information on how to use “type hints” in your code, please see the typing module.



1 Accessing The Annotations Dict Of An Object In Python 3.10 And
  Newer
Python 3.10 adds a new function to the standard library: inspect.get_annotations(). In Python versions 3.10
and newer, calling this function is the best practice for accessing the annotations dict of any object that supports
annotations. This function can also “un-stringize” stringized annotations for you.




                                                             1

====================================
End of howto-annotations_toc.txt
====================================

====================================
 File: howto-argparse-optparse_toc.txt
====================================

     Migrating optparse code to argparse
                                                                                                Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                     April 27, 2025
                                                                                  Python Software Foundation
                                                                                      Email: docs@python.org


Contents



The argparse module offers several higher level features not natively provided by the optparse module, including:
    • Handling positional arguments.
    • Supporting subcommands.
    • Allowing alternative option prefixes like + and /.
    • Handling zero-or-more and one-or-more style arguments.
    • Producing more informative usage messages.
    • Providing a much simpler interface for custom type and action.
Originally, the argparse module attempted to maintain compatibility with optparse. However, the fundamental
design differences between supporting declarative command line option processing (while leaving positional argument
processing to application code), and supporting both named options and positional arguments in the declarative
interface mean that the API has diverged from that of optparse over time.
As described in choosing-an-argument-parser, applications that are currently using optparse and are happy with
the way it works can just continue to use optparse.
Application developers that are considering migrating should also review the list of intrinsic behavioural differences
described in that section before deciding whether or not migration is desirable.
For applications that do choose to migrate from optparse to argparse, the following suggestions should be helpful:
    • Replace all optparse.OptionParser.add_option() calls with ArgumentParser.add_argument()
      calls.
    • Replace (options, args) = parser.parse_args() with args = parser.parse_args() and add
      additional ArgumentParser.add_argument() calls for the positional arguments. Keep in mind that what
      was previously called options, now in the argparse context is called args.
    • Replace     optparse.OptionParser.disable_interspersed_args()                                  by         using
      parse_intermixed_args() instead of parse_args().
    • Replace callback actions and the callback_* keyword arguments with type or action arguments.
    • Replace string names for type keyword arguments with the corresponding type objects (e.g. int, float, complex,
      etc).
    • Replace optparse.Values with Namespace and optparse.OptionError and optparse.
      OptionValueError with ArgumentError.


                                                           1

====================================
End of howto-argparse-optparse_toc.txt
====================================

====================================
 File: howto-argparse_toc.txt
====================================

                                                               Argparse Tutorial
                                                                                               Release 3.13.3


                     Guido van Rossum and the Python development team


                                                                                                    April 27, 2025
                                                                                 Python Software Foundation
                                                                                     Email: docs@python.org


Contents

1 Concepts                                                                                                            2

2 The basics                                                                                                          2

3 Introducing Positional arguments                                                                                    3

4 Introducing Optional arguments                                                                                      4
  4.1 Short options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         6

5 Combining Positional and Optional arguments                                                                         6

6 Getting a little more advanced                                                                                  10
  6.1 Specifying ambiguous arguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        11
  6.2 Conflicting options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     12

7 How to translate the argparse output                                                                            13

8 Custom type converters                                                                                          14

9 Conclusion                                                                                                      14



      author
           Tshepang Mbambo
This tutorial is intended to be a gentle introduction to argparse, the recommended command-line parsing module
in the Python standard library.


 ® Note

 The standard library includes two other libraries directly related to command-line parameter processing: the
 lower level optparse module (which may require more code to configure for a given application, but also al-
 lows an application to request behaviors that argparse doesn’t support), and the very low level getopt (which
 specifically serves as an equivalent to the getopt() family of functions available to C programmers). While
 neither of those modules is covered directly in this guide, many of the core concepts in argparse first originated
 in optparse, so some aspects of this tutorial will also be relevant to optparse users.




                                                         1

====================================
End of howto-argparse_toc.txt
====================================

====================================
 File: howto-clinic_toc.txt
====================================

                                    Argument Clinic How-To
                                                                                 Release 3.13.3


                  Guido van Rossum and the Python development team


                                                                                    April 27, 2025
                                                                       Python Software Foundation
                                                                           Email: docs@python.org


Contents




® Note

The Argument Clinic How-TO has been moved to the Python Developer’s Guide.




                                                  1

====================================
End of howto-clinic_toc.txt
====================================

====================================
 File: howto-cporting_toc.txt
====================================

   Porting Extension Modules to Python
                                     3
                                                                                           Release 3.13.3


                     Guido van Rossum and the Python development team


                                                                                                April 27, 2025
                                                                              Python Software Foundation
                                                                                  Email: docs@python.org


Contents



We recommend the following resources for porting extension modules to Python 3:
   • The Migrating C extensions chapter from Supporting Python 3: An in-depth guide, a book on moving from
     Python 2 to Python 3 in general, guides the reader through porting an extension module.
   • The Porting guide from the py3c project provides opinionated suggestions with supporting code.
   • The Cython and CFFI libraries offer abstractions over Python’s C API. Extensions generally need to be re-
     written to use one of them, but the library then handles differences between various Python versions and
     implementations.




                                                      1

====================================
End of howto-cporting_toc.txt
====================================

====================================
 File: howto-curses_toc.txt
====================================

              Curses Programming with Python
                                                                                               Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                    April 27, 2025
                                                                                  Python Software Foundation
                                                                                      Email: docs@python.org


Contents

1 What is curses?                                                                                                  1
  1.1 The Python curses module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       2

2 Starting and ending a curses application                                                                         2

3 Windows and Pads                                                                                                 3

4 Displaying Text                                                                                                  4
  4.1 Attributes and Color . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     5

5 User Input                                                                                                       6

6 For More Information                                                                                             7



      Author
          A.M. Kuchling, Eric S. Raymond
      Release
           2.04


 Abstract

 This document describes how to use the curses extension module to control text-mode displays.



1 What is curses?
The curses library supplies a terminal-independent screen-painting and keyboard-handling facility for text-based ter-
minals; such terminals include VT100s, the Linux console, and the simulated terminal provided by various programs.
Display terminals support various control codes to perform common operations such as moving the cursor, scrolling
the screen, and erasing areas. Different terminals use widely differing codes, and often have their own minor quirks.
In a world of graphical displays, one might ask “why bother”? It’s true that character-cell display terminals are an
obsolete technology, but there are niches in which being able to do fancy things with them are still valuable. One
niche is on small-footprint or embedded Unixes that don’t run an X server. Another is tools such as OS installers and
kernel configurators that may have to run before any graphical support is available.



                                                         1

====================================
End of howto-curses_toc.txt
====================================

====================================
 File: howto-descriptor_toc.txt
====================================

                                                                Descriptor Guide
                                                                                               Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                   April 27, 2025
                                                                                 Python Software Foundation
                                                                                     Email: docs@python.org


Contents

1 Primer                                                                                                          3
  1.1 Simple example: A descriptor that returns a constant . . . . . . . . . . . . . . . . . . . . . . . . .      3
  1.2 Dynamic lookups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       3
  1.3 Managed attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      4
  1.4 Customized names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      5
  1.5 Closing thoughts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    6

2 Complete Practical Example                                                                                      6
  2.1 Validator class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   7
  2.2 Custom validators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     7
  2.3 Practical application . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   8

3 Technical Tutorial                                                                                               9
  3.1 Abstract . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     9
  3.2 Definition and introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      9
  3.3 Descriptor protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      9
  3.4 Overview of descriptor invocation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     10
  3.5 Invocation from an instance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     10
  3.6 Invocation from a class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     11
  3.7 Invocation from super . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     11
  3.8 Summary of invocation logic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       11
  3.9 Automatic name notification . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       11
  3.10 ORM example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      12

4 Pure Python Equivalents                                                                                         13
  4.1 Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    13
  4.2 Functions and methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       14
  4.3 Kinds of methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      16
  4.4 Static methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    16
  4.5 Class methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     17
  4.6 Member objects and __slots__ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        18



      Author
          Raymond Hettinger
      Contact
          <python at rcn dot com>


                                                         1

====================================
End of howto-descriptor_toc.txt
====================================

====================================
 File: howto-enum_toc.txt
====================================

                                                                          Enum HOWTO
                                                                                                Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                     April 27, 2025
                                                                                   Python Software Foundation
                                                                                       Email: docs@python.org


Contents

1 Programmatic access to enumeration members and their attributes                                                   5

2 Duplicating enum members and values                                                                               5

3 Ensuring unique enumeration values                                                                                6

4 Using automatic values                                                                                            6

5 Iteration                                                                                                         7

6 Comparisons                                                                                                       7

7 Allowed members and attributes of enumerations                                                                    8

8 Restricted Enum subclassing                                                                                       9

9 Dataclass support                                                                                                 9

10 Pickling                                                                                                         10

11 Functional API                                                                                                   10

12 Derived Enumerations                                                                                             12
   12.1 IntEnum . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     12
   12.2 StrEnum . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     13
   12.3 IntFlag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   13
   12.4 Flag . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    14
   12.5 Others . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    15

13 When to use __new__() vs. __init__()                                                                             16
   13.1 Finer Points . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    17

14 How are Enums and Flags different?                                                                               20
   14.1 Enum Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      20
   14.2 Flag Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    20
   14.3 Enum Members (aka instances) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        21
   14.4 Flag Members . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      21




                                                          1

====================================
End of howto-enum_toc.txt
====================================

====================================
 File: howto-free-threading-extensions_toc.txt
====================================

               C API Extension Support for Free
                                    Threading
                                                                                               Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                   April 27, 2025
                                                                                 Python Software Foundation
                                                                                     Email: docs@python.org


Contents

1 Identifying the Free-Threaded Build in C                                                                        1

2 Module Initialization                                                                                           2
  2.1 Multi-Phase Initialization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    2
  2.2 Single-Phase Initialization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   2

3 General API Guidelines                                                                                          3
  3.1 Container Thread Safety . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     3

4 Borrowed References                                                                                             3

5 Memory Allocation APIs                                                                                          4

6 Thread State and GIL APIs                                                                                       4

7 Protecting Internal Extension State                                                                             4

8 Building Extensions for the Free-Threaded Build                                                                 4
  8.1 Limited C API and Stable ABI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        4
  8.2 Windows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       5



Starting with the 3.13 release, CPython has experimental support for running with the global interpreter lock (GIL)
disabled in a configuration called free threading. This document describes how to adapt C API extensions to support
free threading.


1 Identifying the Free-Threaded Build in C
The CPython C API exposes the Py_GIL_DISABLED macro: in the free-threaded build it’s defined to 1, and in the
regular build it’s not defined. You can use it to enable code that only runs under the free-threaded build:

#ifdef Py_GIL_DISABLED
/* code that only runs in the free-threaded build */
#endif




                                                         1

====================================
End of howto-free-threading-extensions_toc.txt
====================================

====================================
 File: howto-free-threading-python_toc.txt
====================================

    Python experimental support for free
                             threading
                                                                                               Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                    April 27, 2025
                                                                                  Python Software Foundation
                                                                                      Email: docs@python.org


Contents

1 Installation                                                                                                     2

2 Identifying free-threaded Python                                                                                 2

3 The global interpreter lock in free-threaded Python                                                              2

4 Thread safety                                                                                                    2

5 Known limitations                                                                                                2
  5.1 Immortalization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      3
  5.2 Frame objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      3
  5.3 Iterators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    3
  5.4 Single-threaded performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        3

Index                                                                                                              4



Starting with the 3.13 release, CPython has experimental support for a build of Python called free threading where
the global interpreter lock (GIL) is disabled. Free-threaded execution allows for full utilization of the available
processing power by running threads in parallel on available CPU cores. While not all software will benefit from this
automatically, programs designed with threading in mind will run faster on multi-core hardware.
The free-threaded mode is experimental and work is ongoing to improve it: expect some bugs and a substantial
single-threaded performance hit.
This document describes the implications of free threading for Python code. See freethreading-extensions-howto for
information on how to write C extensions that support the free-threaded build.


 µ See also

 PEP 703 – Making the Global Interpreter Lock Optional in CPython for an overall description of free-threaded
 Python.




                                                         1

====================================
End of howto-free-threading-python_toc.txt
====================================

====================================
 File: howto-functional_toc.txt
====================================

                Functional Programming HOWTO
                                                                                               Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                   April 27, 2025
                                                                                 Python Software Foundation
                                                                                     Email: docs@python.org


Contents

1 Introduction                                                                                                    2
  1.1 Formal provability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    3
  1.2 Modularity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    3
  1.3 Ease of debugging and testing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     3
  1.4 Composability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     3

2 Iterators                                                                                                       4
  2.1 Data Types That Support Iterators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     5

3 Generator expressions and list comprehensions                                                                   6

4 Generators                                                                                                      7
  4.1 Passing values into a generator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     8

5 Built-in functions                                                                                              10

6 The itertools module                                                                                            11
  6.1 Creating new iterators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    12
  6.2 Calling functions on elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     13
  6.3 Selecting elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    13
  6.4 Combinatoric functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      13
  6.5 Grouping elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     14

7 The functools module                                                                                            15
  7.1 The operator module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       16

8 Small functions and the lambda expression                                                                       17

9 Revision History and Acknowledgements                                                                           18

10 References                                                                                                     18
   10.1 General . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   18
   10.2 Python-specific . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   18
   10.3 Python documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    18

Index                                                                                                             20




                                                         1
      Author
          A. M. Kuchling
      Release
           0.32
In this document, we’ll take a tour of Python’s features suitable for implementing programs in a functional style.
After an introduction to the concepts of functional programming, we’ll look at language features such as iterators and
generators and relevant library modules such as itertools and functools.


1 Introduction
This section explains the basic concept of functional programming; if you’re just interested in learning about Python
language features, skip to the next section on Iterators.
Programming languages support decomposing problems in several different ways:
    • Most programming languages are procedural: programs are lists of instructions that tell the computer what
      to do with the program’s input. C, Pascal, and even Unix shells are procedural languages.
    • In declarative languages, you write a specification that describes the problem to be solved, and the language
      implementation figures out how to perform the computation efficiently. SQL is the declarative language you’re
      most likely to be familiar with; a SQL query describes the data set you want to retrieve, and the SQL engine
      decides whether to scan tables or use indexes, which subclauses should be performed first, etc.
    • Object-oriented programs manipulate collections of objects. Objects have internal state and support methods
      that query or modify this internal state in some way. Smalltalk and Java are object-oriented languages. C++
      and Python are languages that support object-oriented programming, but don’t force the use of object-oriented
      features.
    • Functional programming decomposes a problem into a set of functions. Ideally, functions only take inputs
      and produce outputs, and don’t have any internal state that affects the output produced for a given input. Well-
      known functional languages include the ML family (Standard ML, OCaml, and other variants) and Haskell.
The designers of some computer languages choose to emphasize one particular approach to programming. This often
makes it difficult to write programs that use a different approach. Other languages are multi-paradigm languages that
support several different approaches. Lisp, C++, and Python are multi-paradigm; you can write programs or libraries
that are largely procedural, object-oriented, or functional in all of these languages. In a large program, different
sections might be written using different approaches; the GUI might be object-oriented while the processing logic is
procedural or functional, for example.
In a functional program, input flows through a set of functions. Each function operates on its input and produces some
output. Functional style discourages functions with side effects that modify internal state or make other changes that
aren’t visible in the function’s return value. Functions that have no side effects at all are called purely functional.
Avoiding side effects means not using data structures that get updated as a program runs; every function’s output must
only depend on its input.
Some languages are very strict about purity and don’t even have assignment statements such as a=3 or c = a + b,
but it’s difficult to avoid all side effects, such as printing to the screen or writing to a disk file. Another example is a
call to the print() or time.sleep() function, neither of which returns a useful value. Both are called only for
their side effects of sending some text to the screen or pausing execution for a second.
Python programs written in functional style usually won’t go to the extreme of avoiding all I/O or all assignments;
instead, they’ll provide a functional-appearing interface but will use non-functional features internally. For example,
the implementation of a function will still use assignments to local variables, but won’t modify global variables or
have other side effects.
Functional programming can be considered the opposite of object-oriented programming. Objects are little capsules
containing some internal state along with a collection of method calls that let you modify this state, and programs
consist of making the right set of state changes. Functional programming wants to avoid state changes as much as
possible and works with data flowing between functions. In Python you might combine the two approaches by writing
functions that take and return instances representing objects in your application (e-mail messages, transactions, etc.).




                                                             2
Functional design may seem like an odd constraint to work under. Why should you avoid objects and side effects?
There are theoretical and practical advantages to the functional style:
    • Formal provability.
    • Modularity.
    • Composability.
    • Ease of debugging and testing.

1.1 Formal provability
A theoretical benefit is that it’s easier to construct a mathematical proof that a functional program is correct.
For a long time researchers have been interested in finding ways to mathematically prove programs correct. This is
different from testing a program on numerous inputs and concluding that its output is usually correct, or reading a
program’s source code and concluding that the code looks right; the goal is instead a rigorous proof that a program
produces the right result for all possible inputs.
The technique used to prove programs correct is to write down invariants, properties of the input data and of the
program’s variables that are always true. For each line of code, you then show that if invariants X and Y are true before
the line is executed, the slightly different invariants X’ and Y’ are true after the line is executed. This continues until
you reach the end of the program, at which point the invariants should match the desired conditions on the program’s
output.
Functional programming’s avoidance of assignments arose because assignments are difficult to handle with this tech-
nique; assignments can break invariants that were true before the assignment without producing any new invariants
that can be propagated onward.
Unfortunately, proving programs correct is largely impractical and not relevant to Python software. Even trivial
programs require proofs that are several pages long; the proof of correctness for a moderately complicated program
would be enormous, and few or none of the programs you use daily (the Python interpreter, your XML parser, your
web browser) could be proven correct. Even if you wrote down or generated a proof, there would then be the question
of verifying the proof; maybe there’s an error in it, and you wrongly believe you’ve proved the program correct.

1.2 Modularity
A more practical benefit of functional programming is that it forces you to break apart your problem into small pieces.
Programs are more modular as a result. It’s easier to specify and write a small function that does one thing than a
large function that performs a complicated transformation. Small functions are also easier to read and to check for
errors.

1.3 Ease of debugging and testing
Testing and debugging a functional-style program is easier.
Debugging is simplified because functions are generally small and clearly specified. When a program doesn’t work,
each function is an interface point where you can check that the data are correct. You can look at the intermediate
inputs and outputs to quickly isolate the function that’s responsible for a bug.
Testing is easier because each function is a potential subject for a unit test. Functions don’t depend on system state
that needs to be replicated before running a test; instead you only have to synthesize the right input and then check
that the output matches expectations.

1.4 Composability
As you work on a functional-style program, you’ll write a number of functions with varying inputs and outputs. Some
of these functions will be unavoidably specialized to a particular application, but others will be useful in a wide variety
of programs. For example, a function that takes a directory path and returns all the XML files in the directory, or a
function that takes a filename and returns its contents, can be applied to many different situations.
Over time you’ll form a personal library of utilities. Often you’ll assemble new programs by arranging existing
functions in a new configuration and writing a few functions specialized for the current task.


                                                            3
2 Iterators
I’ll start by looking at a Python language feature that’s an important foundation for writing functional-style programs:
iterators.
An iterator is an object representing a stream of data; this object returns the data one element at a time. A Python
iterator must support a method called __next__() that takes no arguments and always returns the next element of
the stream. If there are no more elements in the stream, __next__() must raise the StopIteration exception.
Iterators don’t have to be finite, though; it’s perfectly reasonable to write an iterator that produces an infinite stream
of data.
The built-in iter() function takes an arbitrary object and tries to return an iterator that will return the object’s
contents or elements, raising TypeError if the object doesn’t support iteration. Several of Python’s built-in data
types support iteration, the most common being lists and dictionaries. An object is called iterable if you can get an
iterator for it.
You can experiment with the iteration interface manually:

>>> L = [1, 2, 3]
>>> it = iter(L)
>>> it
<...iterator object at ...>
>>> it.__next__() # same as next(it)
1
>>> next(it)
2
>>> next(it)
3
>>> next(it)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration
>>>

Python expects iterable objects in several different contexts, the most important being the for statement. In the
statement for X in Y, Y must be an iterator or some object for which iter() can create an iterator. These two
statements are equivalent:

for i in iter(obj):
    print(i)

for i in obj:
    print(i)

Iterators can be materialized as lists or tuples by using the list() or tuple() constructor functions:

>>> L = [1, 2, 3]
>>> iterator = iter(L)
>>> t = tuple(iterator)
>>> t
(1, 2, 3)

Sequence unpacking also supports iterators: if you know an iterator will return N elements, you can unpack them
into an N-tuple:

>>> L = [1, 2, 3]
>>> iterator = iter(L)
>>> a, b, c = iterator
>>> a, b, c
(1, 2, 3)



                                                            4
Built-in functions such as max() and min() can take a single iterator argument and will return the largest or smallest
element. The "in" and "not in" operators also support iterators: X in iterator is true if X is found in the
stream returned by the iterator. You’ll run into obvious problems if the iterator is infinite; max(), min() will never
return, and if the element X never appears in the stream, the "in" and "not in" operators won’t return either.
Note that you can only go forward in an iterator; there’s no way to get the previous element, reset the iterator, or
make a copy of it. Iterator objects can optionally provide these additional capabilities, but the iterator protocol only
specifies the __next__() method. Functions may therefore consume all of the iterator’s output, and if you need to
do something different with the same stream, you’ll have to create a new iterator.

2.1 Data Types That Support Iterators
We’ve already seen how lists and tuples support iterators. In fact, any Python sequence type, such as strings, will
automatically support creation of an iterator.
Calling iter() on a dictionary returns an iterator that will loop over the dictionary’s keys:

>>> m = {'Jan': 1, 'Feb': 2, 'Mar': 3, 'Apr': 4, 'May': 5, 'Jun': 6,
...      'Jul': 7, 'Aug': 8, 'Sep': 9, 'Oct': 10, 'Nov': 11, 'Dec': 12}
>>> for key in m:
...     print(key, m[key])
Jan 1
Feb 2
Mar 3
Apr 4
May 5
Jun 6
Jul 7
Aug 8
Sep 9
Oct 10
Nov 11
Dec 12

Note that starting with Python 3.7, dictionary iteration order is guaranteed to be the same as the insertion order. In
earlier versions, the behaviour was unspecified and could vary between implementations.
Applying iter() to a dictionary always loops over the keys, but dictionaries have methods that return other iterators.
If you want to iterate over values or key/value pairs, you can explicitly call the values() or items() methods to
get an appropriate iterator.
The dict() constructor can accept an iterator that returns a finite stream of (key, value) tuples:

>>> L = [('Italy', 'Rome'), ('France', 'Paris'), ('US', 'Washington DC')]
>>> dict(iter(L))
{'Italy': 'Rome', 'France': 'Paris', 'US': 'Washington DC'}

Files also support iteration by calling the readline() method until there are no more lines in the file. This means
you can read each line of a file like this:

for line in file:
    # do something for each line
    ...

Sets can take their contents from an iterable and let you iterate over the set’s elements:

>>> S = {2, 3, 5, 7, 11, 13}
>>> for i in S:
...     print(i)
2
                                                                                                   (continues on next page)



                                                           5
                                                                                             (continued from previous page)
3
5
7
11
13



3 Generator expressions and list comprehensions
Two common operations on an iterator’s output are 1) performing some operation for every element, 2) selecting a
subset of elements that meet some condition. For example, given a list of strings, you might want to strip off trailing
whitespace from each line or extract all the strings containing a given substring.
List comprehensions and generator expressions (short form: “listcomps” and “genexps”) are a concise notation for
such operations, borrowed from the functional programming language Haskell (https://www.haskell.org/). You can
strip all the whitespace from a stream of strings with the following code:

>>> line_list = ['          line 1\n', 'line 2          \n', ' \n', '']

>>> # Generator expression -- returns iterator
>>> stripped_iter = (line.strip() for line in line_list)

>>> # List comprehension -- returns list
>>> stripped_list = [line.strip() for line in line_list]

You can select only certain elements by adding an "if" condition:

>>> stripped_list = [line.strip() for line in line_list
...                  if line != ""]

With a list comprehension, you get back a Python list; stripped_list is a list containing the resulting lines, not an
iterator. Generator expressions return an iterator that computes the values as necessary, not needing to materialize
all the values at once. This means that list comprehensions aren’t useful if you’re working with iterators that return
an infinite stream or a very large amount of data. Generator expressions are preferable in these situations.
Generator expressions are surrounded by parentheses (“()”) and list comprehensions are surrounded by square brack-
ets (“[]”). Generator expressions have the form:

( expression for expr in sequence1
             if condition1
             for expr2 in sequence2
             if condition2
             for expr3 in sequence3
             ...
             if condition3
             for exprN in sequenceN
             if conditionN )

Again, for a list comprehension only the outside brackets are different (square brackets instead of parentheses).
The elements of the generated output will be the successive values of expression. The if clauses are all optional;
if present, expression is only evaluated and added to the result when condition is true.
Generator expressions always have to be written inside parentheses, but the parentheses signalling a function call also
count. If you want to create an iterator that will be immediately passed to a function you can write:

obj_total = sum(obj.count for obj in list_all_objects())

The for...in clauses contain the sequences to be iterated over. The sequences do not have to be the same length,
because they are iterated over from left to right, not in parallel. For each element in sequence1, sequence2 is


                                                          6
looped over from the beginning. sequence3 is then looped over for each resulting pair of elements from sequence1
and sequence2.
To put it another way, a list comprehension or generator expression is equivalent to the following Python code:

for expr1 in sequence1:
    if not (condition1):
        continue    # Skip this element
    for expr2 in sequence2:
        if not (condition2):
            continue    # Skip this element
        ...
        for exprN in sequenceN:
            if not (conditionN):
                 continue   # Skip this element

                 # Output the value of
                 # the expression.

This means that when there are multiple for...in clauses but no if clauses, the length of the resulting output will
be equal to the product of the lengths of all the sequences. If you have two lists of length 3, the output list is 9
elements long:

>>> seq1 = 'abc'
>>> seq2 = (1, 2, 3)
>>> [(x, y) for x in seq1 for y in seq2]
[('a', 1), ('a', 2), ('a', 3),
 ('b', 1), ('b', 2), ('b', 3),
 ('c', 1), ('c', 2), ('c', 3)]

To avoid introducing an ambiguity into Python’s grammar, if expression is creating a tuple, it must be surrounded
with parentheses. The first list comprehension below is a syntax error, while the second one is correct:

# Syntax error
[x, y for x in seq1 for y in seq2]
# Correct
[(x, y) for x in seq1 for y in seq2]



4 Generators
Generators are a special class of functions that simplify the task of writing iterators. Regular functions compute a
value and return it, but generators return an iterator that returns a stream of values.
You’re doubtless familiar with how regular function calls work in Python or C. When you call a function, it gets a
private namespace where its local variables are created. When the function reaches a return statement, the local
variables are destroyed and the value is returned to the caller. A later call to the same function creates a new private
namespace and a fresh set of local variables. But, what if the local variables weren’t thrown away on exiting a function?
What if you could later resume the function where it left off? This is what generators provide; they can be thought
of as resumable functions.
Here’s the simplest example of a generator function:

>>> def generate_ints(N):
...    for i in range(N):
...        yield i

Any function containing a yield keyword is a generator function; this is detected by Python’s bytecode compiler
which compiles the function specially as a result.



                                                           7
When you call a generator function, it doesn’t return a single value; instead it returns a generator object that supports
the iterator protocol. On executing the yield expression, the generator outputs the value of i, similar to a return
statement. The big difference between yield and a return statement is that on reaching a yield the generator’s
state of execution is suspended and local variables are preserved. On the next call to the generator’s __next__()
method, the function will resume executing.
Here’s a sample usage of the generate_ints() generator:

>>> gen = generate_ints(3)
>>> gen
<generator object generate_ints at ...>
>>> next(gen)
0
>>> next(gen)
1
>>> next(gen)
2
>>> next(gen)
Traceback (most recent call last):
  File "stdin", line 1, in <module>
  File "stdin", line 2, in generate_ints
StopIteration

You could equally write for i in generate_ints(5), or a, b, c = generate_ints(3).
Inside a generator function, return value causes StopIteration(value) to be raised from the __next__()
method. Once this happens, or the bottom of the function is reached, the procession of values ends and the generator
cannot yield any further values.
You could achieve the effect of generators manually by writing your own class and storing all the local variables of the
generator as instance variables. For example, returning a list of integers could be done by setting self.count to 0,
and having the __next__() method increment self.count and return it. However, for a moderately complicated
generator, writing a corresponding class can be much messier.
The test suite included with Python’s library, Lib/test/test_generators.py, contains a number of more interesting ex-
amples. Here’s one generator that implements an in-order traversal of a tree using generators recursively.

# A recursive generator that generates Tree leaves in in-order.
def inorder(t):
    if t:
        for x in inorder(t.left):
            yield x

           yield t.label

           for x in inorder(t.right):
               yield x

Two other examples in test_generators.py produce solutions for the N-Queens problem (placing N queens on
an NxN chess board so that no queen threatens another) and the Knight’s Tour (finding a route that takes a knight to
every square of an NxN chessboard without visiting any square twice).

4.1 Passing values into a generator
In Python 2.4 and earlier, generators only produced output. Once a generator’s code was invoked to create an iterator,
there was no way to pass any new information into the function when its execution is resumed. You could hack
together this ability by making the generator look at a global variable or by passing in some mutable object that
callers then modify, but these approaches are messy.
In Python 2.5 there’s a simple way to pass values into a generator. yield became an expression, returning a value
that can be assigned to a variable or otherwise operated on:


                                                           8
val = (yield i)

I recommend that you always put parentheses around a yield expression when you’re doing something with the
returned value, as in the above example. The parentheses aren’t always necessary, but it’s easier to always add them
instead of having to remember when they’re needed.
(PEP 342 explains the exact rules, which are that a yield-expression must always be parenthesized except when it
occurs at the top-level expression on the right-hand side of an assignment. This means you can write val = yield
i but have to use parentheses when there’s an operation, as in val = (yield i) + 12.)

Values are sent into a generator by calling its send(value) method. This method resumes the generator’s code and
the yield expression returns the specified value. If the regular __next__() method is called, the yield returns
None.

Here’s a simple counter that increments by 1 and allows changing the value of the internal counter.

def counter(maximum):
    i = 0
    while i < maximum:
        val = (yield i)
        # If value provided, change counter
        if val is not None:
            i = val
        else:
            i += 1

And here’s an example of changing the counter:

>>> it = counter(10)
>>> next(it)
0
>>> next(it)
1
>>> it.send(8)
8
>>> next(it)
9
>>> next(it)
Traceback (most recent call last):
  File "t.py", line 15, in <module>
    it.next()
StopIteration

Because yield will often be returning None, you should always check for this case. Don’t just use its value in
expressions unless you’re sure that the send() method will be the only method used to resume your generator
function.
In addition to send(), there are two other methods on generators:
    • throw(value) is used to raise an exception inside the generator; the exception is raised by the yield ex-
      pression where the generator’s execution is paused.
    • close() raises a GeneratorExit exception inside the generator to terminate the iteration. On receiving
      this exception, the generator’s code must either raise GeneratorExit or StopIteration; catching the
      exception and doing anything else is illegal and will trigger a RuntimeError. close() will also be called by
      Python’s garbage collector when the generator is garbage-collected.
      If you need to run cleanup code when a GeneratorExit occurs, I suggest using a try: ... finally:
      suite instead of catching GeneratorExit.
The cumulative effect of these changes is to turn generators from one-way producers of information into both pro-
ducers and consumers.


                                                         9
Generators also become coroutines, a more generalized form of subroutines. Subroutines are entered at one point
and exited at another point (the top of the function, and a return statement), but coroutines can be entered, exited,
and resumed at many different points (the yield statements).


5 Built-in functions
Let’s look in more detail at built-in functions often used with iterators.
Two of Python’s built-in functions, map() and filter() duplicate the features of generator expressions:
map(f, iterA, iterB, ...) returns an iterator over the sequence
     f(iterA[0], iterB[0]), f(iterA[1], iterB[1]), f(iterA[2], iterB[2]), ....

       >>> def upper(s):
       ...     return s.upper()


       >>> list(map(upper, ['sentence', 'fragment']))
       ['SENTENCE', 'FRAGMENT']
       >>> [upper(s) for s in ['sentence', 'fragment']]
       ['SENTENCE', 'FRAGMENT']

You can of course achieve the same effect with a list comprehension.
filter(predicate, iter) returns an iterator over all the sequence elements that meet a certain condition, and is
similarly duplicated by list comprehensions. A predicate is a function that returns the truth value of some condition;
for use with filter(), the predicate must take a single value.

>>> def is_even(x):
...     return (x % 2) == 0


>>> list(filter(is_even, range(10)))
[0, 2, 4, 6, 8]

This can also be written as a list comprehension:

>>> list(x for x in range(10) if is_even(x))
[0, 2, 4, 6, 8]

enumerate(iter, start=0) counts off the elements in the iterable returning 2-tuples containing the count (from
start) and each element.

>>> for item in enumerate(['subject', 'verb', 'object']):
...     print(item)
(0, 'subject')
(1, 'verb')
(2, 'object')

enumerate() is often used when looping through a list and recording the indexes at which certain conditions are
met:

f = open('data.txt', 'r')
for i, line in enumerate(f):
    if line.strip() == '':
        print('Blank line at line #%i' % i)

sorted(iterable, key=None, reverse=False) collects all the elements of the iterable into a list, sorts the
list, and returns the sorted result. The key and reverse arguments are passed through to the constructed list’s sort()
method.



                                                           10
>>> import random
>>> # Generate 8 random numbers between [0, 10000)
>>> rand_list = random.sample(range(10000), 8)
>>> rand_list
[769, 7953, 9828, 6431, 8442, 9878, 6213, 2207]
>>> sorted(rand_list)
[769, 2207, 6213, 6431, 7953, 8442, 9828, 9878]
>>> sorted(rand_list, reverse=True)
[9878, 9828, 8442, 7953, 6431, 6213, 2207, 769]

(For a more detailed discussion of sorting, see the sortinghowto.)
The any(iter) and all(iter) built-ins look at the truth values of an iterable’s contents. any() returns True if
any element in the iterable is a true value, and all() returns True if all of the elements are true values:

>>> any([0, 1, 0])
True
>>> any([0, 0, 0])
False
>>> any([1, 1, 1])
True
>>> all([0, 1, 0])
False
>>> all([0, 0, 0])
False
>>> all([1, 1, 1])
True

zip(iterA, iterB, ...) takes one element from each iterable and returns them in a tuple:

zip(['a', 'b', 'c'], (1, 2, 3)) =>
  ('a', 1), ('b', 2), ('c', 3)

It doesn’t construct an in-memory list and exhaust all the input iterators before returning; instead tuples are constructed
and returned only if they’re requested. (The technical term for this behaviour is lazy evaluation.)
This iterator is intended to be used with iterables that are all of the same length. If the iterables are of different
lengths, the resulting stream will be the same length as the shortest iterable.

zip(['a', 'b'], (1, 2, 3)) =>
  ('a', 1), ('b', 2)

You should avoid doing this, though, because an element may be taken from the longer iterators and discarded. This
means you can’t go on to use the iterators further because you risk skipping a discarded element.


6 The itertools module
The itertools module contains a number of commonly used iterators as well as functions for combining several
iterators. This section will introduce the module’s contents by showing small examples.
The module’s functions fall into a few broad classes:
    • Functions that create a new iterator based on an existing iterator.
    • Functions for treating an iterator’s elements as function arguments.
    • Functions for selecting portions of an iterator’s output.
    • A function for grouping an iterator’s output.




                                                           11
6.1 Creating new iterators
itertools.count(start, step) returns an infinite stream of evenly spaced values. You can optionally supply
the starting number, which defaults to 0, and the interval between numbers, which defaults to 1:

itertools.count() =>
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...
itertools.count(10) =>
  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, ...
itertools.count(10, 5) =>
  10, 15, 20, 25, 30, 35, 40, 45, 50, 55, ...

itertools.cycle(iter) saves a copy of the contents of a provided iterable and returns a new iterator that returns
its elements from first to last. The new iterator will repeat these elements infinitely.

itertools.cycle([1, 2, 3, 4, 5]) =>
  1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...

itertools.repeat(elem, [n]) returns the provided element n times, or returns the element endlessly if n is
not provided.

itertools.repeat('abc') =>
  abc, abc, abc, abc, abc, abc, abc, abc, abc, abc, ...
itertools.repeat('abc', 5) =>
  abc, abc, abc, abc, abc

itertools.chain(iterA, iterB, ...) takes an arbitrary number of iterables as input, and returns all the
elements of the first iterator, then all the elements of the second, and so on, until all of the iterables have been
exhausted.

itertools.chain(['a', 'b', 'c'], (1, 2, 3)) =>
  a, b, c, 1, 2, 3

itertools.islice(iter, [start], stop, [step]) returns a stream that’s a slice of the iterator. With a
single stop argument, it will return the first stop elements. If you supply a starting index, you’ll get stop-start elements,
and if you supply a value for step, elements will be skipped accordingly. Unlike Python’s string and list slicing, you
can’t use negative values for start, stop, or step.

itertools.islice(range(10), 8) =>
  0, 1, 2, 3, 4, 5, 6, 7
itertools.islice(range(10), 2, 8) =>
  2, 3, 4, 5, 6, 7
itertools.islice(range(10), 2, 8, 2) =>
  2, 4, 6

itertools.tee(iter, [n]) replicates an iterator; it returns n independent iterators that will all return the con-
tents of the source iterator. If you don’t supply a value for n, the default is 2. Replicating iterators requires saving
some of the contents of the source iterator, so this can consume significant memory if the iterator is large and one
of the new iterators is consumed more than the others.

itertools.tee( itertools.count() ) =>
   iterA, iterB

where iterA ->
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...

and   iterB ->
   0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ...




                                                            12
6.2 Calling functions on elements
The operator module contains a set of functions corresponding to Python’s operators. Some examples
are operator.add(a, b) (adds two values), operator.ne(a, b) (same as a != b), and operator.
attrgetter('id') (returns a callable that fetches the .id attribute).

itertools.starmap(func, iter) assumes that the iterable will return a stream of tuples, and calls func using
these tuples as the arguments:

itertools.starmap(os.path.join,
                   [('/bin', 'python'), ('/usr', 'bin', 'java'),
                    ('/usr', 'bin', 'perl'), ('/usr', 'bin', 'ruby')])
=>
   /bin/python, /usr/bin/java, /usr/bin/perl, /usr/bin/ruby


6.3 Selecting elements
Another group of functions chooses a subset of an iterator’s elements based on a predicate.
itertools.filterfalse(predicate, iter) is the opposite of filter(), returning all elements for which
the predicate returns false:

itertools.filterfalse(is_even, itertools.count()) =>
  1, 3, 5, 7, 9, 11, 13, 15, ...

itertools.takewhile(predicate, iter) returns elements for as long as the predicate returns true. Once the
predicate returns false, the iterator will signal the end of its results.

def less_than_10(x):
    return x < 10

itertools.takewhile(less_than_10, itertools.count()) =>
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9

itertools.takewhile(is_even, itertools.count()) =>
  0

itertools.dropwhile(predicate, iter) discards elements while the predicate returns true, and then returns
the rest of the iterable’s results.

itertools.dropwhile(less_than_10, itertools.count()) =>
  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, ...

itertools.dropwhile(is_even, itertools.count()) =>
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ...

itertools.compress(data, selectors) takes two iterators and returns only those elements of data for which
the corresponding element of selectors is true, stopping whenever either one is exhausted:

itertools.compress([1, 2, 3, 4, 5], [True, True, False, False, True]) =>
   1, 2, 5


6.4 Combinatoric functions
The itertools.combinations(iterable, r) returns an iterator giving all possible r-tuple combinations of
the elements contained in iterable.

itertools.combinations([1, 2, 3, 4, 5], 2) =>
  (1, 2), (1, 3), (1, 4), (1, 5),
                                                                                              (continues on next page)



                                                             13
                                                                                             (continued from previous page)
  (2, 3), (2, 4), (2, 5),
  (3, 4), (3, 5),
  (4, 5)

itertools.combinations([1, 2, 3, 4, 5], 3) =>
  (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 4), (1, 3, 5), (1, 4, 5),
  (2, 3, 4), (2, 3, 5), (2, 4, 5),
  (3, 4, 5)

The elements within each tuple remain in the same order as iterable returned them. For example, the number 1 is
always before 2, 3, 4, or 5 in the examples above. A similar function, itertools.permutations(iterable,
r=None), removes this constraint on the order, returning all possible arrangements of length r:

itertools.permutations([1, 2, 3, 4, 5], 2) =>
  (1, 2), (1, 3), (1, 4), (1, 5),
  (2, 1), (2, 3), (2, 4), (2, 5),
  (3, 1), (3, 2), (3, 4), (3, 5),
  (4, 1), (4, 2), (4, 3), (4, 5),
  (5, 1), (5, 2), (5, 3), (5, 4)

itertools.permutations([1, 2, 3, 4, 5]) =>
  (1, 2, 3, 4, 5), (1, 2, 3, 5, 4), (1, 2, 4, 3, 5),
  ...
  (5, 4, 3, 2, 1)

If you don’t supply a value for r the length of the iterable is used, meaning that all the elements are permuted.
Note that these functions produce all of the possible combinations by position and don’t require that the contents of
iterable are unique:

itertools.permutations('aba', 3) =>
  ('a', 'b', 'a'), ('a', 'a', 'b'), ('b', 'a', 'a'),
  ('b', 'a', 'a'), ('a', 'a', 'b'), ('a', 'b', 'a')

The identical tuple ('a', 'a', 'b') occurs twice, but the two ‘a’ strings came from different positions.
The itertools.combinations_with_replacement(iterable, r) function relaxes a different constraint:
elements can be repeated within a single tuple. Conceptually an element is selected for the first position of each tuple
and then is replaced before the second element is selected.

itertools.combinations_with_replacement([1, 2, 3, 4, 5], 2) =>
  (1, 1), (1, 2), (1, 3), (1, 4), (1, 5),
  (2, 2), (2, 3), (2, 4), (2, 5),
  (3, 3), (3, 4), (3, 5),
  (4, 4), (4, 5),
  (5, 5)


6.5 Grouping elements
The last function I’ll discuss, itertools.groupby(iter, key_func=None), is the most complicated.
key_func(elem) is a function that can compute a key value for each element returned by the iterable. If you
don’t supply a key function, the key is simply each element itself.
groupby() collects all the consecutive elements from the underlying iterable that have the same key value, and
returns a stream of 2-tuples containing a key value and an iterator for the elements with that key.

city_list = [('Decatur', 'AL'), ('Huntsville', 'AL'), ('Selma', 'AL'),
             ('Anchorage', 'AK'), ('Nome', 'AK'),
                                                                                                   (continues on next page)



                                                          14
                                                                                             (continued from previous page)
                     ('Flagstaff', 'AZ'), ('Phoenix', 'AZ'), ('Tucson', 'AZ'),
                     ...
                 ]

def get_state(city_state):
    return city_state[1]

itertools.groupby(city_list, get_state) =>
  ('AL', iterator-1),
  ('AK', iterator-2),
  ('AZ', iterator-3), ...

where
iterator-1 =>
  ('Decatur', 'AL'), ('Huntsville', 'AL'), ('Selma', 'AL')
iterator-2 =>
  ('Anchorage', 'AK'), ('Nome', 'AK')
iterator-3 =>
  ('Flagstaff', 'AZ'), ('Phoenix', 'AZ'), ('Tucson', 'AZ')

groupby() assumes that the underlying iterable’s contents will already be sorted based on the key. Note that the
returned iterators also use the underlying iterable, so you have to consume the results of iterator-1 before requesting
iterator-2 and its corresponding key.


7 The functools module
The functools module contains some higher-order functions. A higher-order function takes one or more func-
tions as input and returns a new function. The most useful tool in this module is the functools.partial()
function.
For programs written in a functional style, you’ll sometimes want to construct variants of existing functions that have
some of the parameters filled in. Consider a Python function f(a, b, c); you may wish to create a new function
g(b, c) that’s equivalent to f(1, b, c); you’re filling in a value for one of f()’s parameters. This is called
“partial function application”.
The constructor for partial() takes the arguments (function, arg1, arg2, ..., kwarg1=value1,
kwarg2=value2). The resulting object is callable, so you can just call it to invoke function with the filled-in
arguments.
Here’s a small but realistic example:

import functools

def log(message, subsystem):
    """Write the contents of 'message' to the specified subsystem."""
    print('%s: %s' % (subsystem, message))
    ...

server_log = functools.partial(log, subsystem='server')
server_log('Unable to open socket')

functools.reduce(func, iter, [initial_value]) cumulatively performs an operation on all the iter-
able’s elements and, therefore, can’t be applied to infinite iterables. func must be a function that takes two elements
and returns a single value. functools.reduce() takes the first two elements A and B returned by the iterator
and calculates func(A, B). It then requests the third element, C, calculates func(func(A, B), C), combines
this result with the fourth element returned, and continues until the iterable is exhausted. If the iterable returns
no values at all, a TypeError exception is raised. If the initial value is supplied, it’s used as a starting point and
func(initial_value, A) is the first calculation.


                                                          15
>>> import operator, functools
>>> functools.reduce(operator.concat, ['A', 'BB', 'C'])
'ABBC'
>>> functools.reduce(operator.concat, [])
Traceback (most recent call last):
  ...
TypeError: reduce() of empty sequence with no initial value
>>> functools.reduce(operator.mul, [1, 2, 3], 1)
6
>>> functools.reduce(operator.mul, [], 1)
1

If you use operator.add() with functools.reduce(), you’ll add up all the elements of the iterable. This case
is so common that there’s a special built-in called sum() to compute it:

>>> import functools, operator
>>> functools.reduce(operator.add, [1, 2, 3, 4], 0)
10
>>> sum([1, 2, 3, 4])
10
>>> sum([])
0

For many uses of functools.reduce(), though, it can be clearer to just write the obvious for loop:

import functools
# Instead of:
product = functools.reduce(operator.mul, [1, 2, 3], 1)

# You can write:
product = 1
for i in [1, 2, 3]:
    product *= i

A related function is itertools.accumulate(iterable, func=operator.add). It performs the same cal-
culation, but instead of returning only the final result, accumulate() returns an iterator that also yields each partial
result:

itertools.accumulate([1, 2, 3, 4, 5]) =>
  1, 3, 6, 10, 15

itertools.accumulate([1, 2, 3, 4, 5], operator.mul) =>
  1, 2, 6, 24, 120


7.1 The operator module
The operator module was mentioned earlier. It contains a set of functions corresponding to Python’s operators.
These functions are often useful in functional-style code because they save you from writing trivial functions that
perform a single operation.
Some of the functions in this module are:
    • Math operations: add(), sub(), mul(), floordiv(), abs(), …
    • Logical operations: not_(), truth().
    • Bitwise operations: and_(), or_(), invert().
    • Comparisons: eq(), ne(), lt(), le(), gt(), and ge().
    • Object identity: is_(), is_not().


                                                          16
Consult the operator module’s documentation for a complete list.


8 Small functions and the lambda expression
When writing functional-style programs, you’ll often need little functions that act as predicates or that combine
elements in some way.
If there’s a Python built-in or a module function that’s suitable, you don’t need to define a new function at all:

stripped_lines = [line.strip() for line in lines]
existing_files = filter(os.path.exists, file_list)

If the function you need doesn’t exist, you need to write it. One way to write small functions is to use the lambda
expression. lambda takes a number of parameters and an expression combining these parameters, and creates an
anonymous function that returns the value of the expression:

adder = lambda x, y: x+y

print_assign = lambda name, value: name + '=' + str(value)

An alternative is to just use the def statement and define a function in the usual way:

def adder(x, y):
    return x + y

def print_assign(name, value):
    return name + '=' + str(value)

Which alternative is preferable? That’s a style question; my usual course is to avoid using lambda.
One reason for my preference is that lambda is quite limited in the functions it can define. The result has to be
computable as a single expression, which means you can’t have multiway if... elif... else comparisons or
try... except statements. If you try to do too much in a lambda statement, you’ll end up with an overly com-
plicated expression that’s hard to read. Quick, what’s the following code doing?

import functools
total = functools.reduce(lambda a, b: (0, a[1] + b[1]), items)[1]

You can figure it out, but it takes time to disentangle the expression to figure out what’s going on. Using a short nested
def statements makes things a little bit better:

import functools
def combine(a, b):
    return 0, a[1] + b[1]

total = functools.reduce(combine, items)[1]

But it would be best of all if I had simply used a for loop:

total = 0
for a, b in items:
    total += b

Or the sum() built-in and a generator expression:

total = sum(b for a, b in items)

Many uses of functools.reduce() are clearer when written as for loops.
Fredrik Lundh once suggested the following set of rules for refactoring uses of lambda:


                                                           17

====================================
End of howto-functional_toc.txt
====================================

====================================
 File: howto-gdb_helpers_toc.txt
====================================

                Debugging C API extensions and
                    CPython Internals with GDB
                                                                                               Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                   April 27, 2025
                                                                                 Python Software Foundation
                                                                                     Email: docs@python.org


Contents

1 Prerequisites                                                                                                   2
  1.1 Setup with Python built from source . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       2
  1.2 Setup for Python from a Linux distro . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      2

2 Using the Debug build and Development mode                                                                      2

3 Using the python-gdb extension                                                                                  3
  3.1 Pretty-printers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   3
  3.2 py-list . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       4
  3.3 py-up and py-down . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         5
  3.4 py-bt . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     6
  3.5 py-print . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      7
  3.6 py-locals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       7

4 Use with GDB commands                                                                                           8



This document explains how the Python GDB extension, python-gdb.py, can be used with the GDB debugger to
debug CPython extensions and the CPython interpreter itself.
When debugging low-level problems such as crashes or deadlocks, a low-level debugger, such as GDB, is useful to
diagnose and correct the issue. By default, GDB (or any of its front-ends) doesn’t support high-level information
specific to the CPython interpreter.
The python-gdb.py extension adds CPython interpreter information to GDB. The extension helps introspect the
stack of currently executing Python functions. Given a Python object represented by a PyObject* pointer, the
extension surfaces the type and value of the object.
Developers who are working on CPython extensions or tinkering with parts of CPython that are written in C can use
this document to learn how to use the python-gdb.py extension with GDB.


 ® Note

 This document assumes that you are familiar with the basics of GDB and the CPython C API. It consolidates
 guidance from the devguide and the Python wiki.



                                                         1

====================================
End of howto-gdb_helpers_toc.txt
====================================

====================================
 File: howto-instrumentation_toc.txt
====================================

        Instrumenting CPython with DTrace
                           and SystemTap
                                                                                          Release 3.13.3


                     Guido van Rossum and the Python development team


                                                                                               April 27, 2025
                                                                             Python Software Foundation
                                                                                 Email: docs@python.org


Contents

1 Enabling the static markers                                                                                2

2 Static DTrace probes                                                                                       3

3 Static SystemTap markers                                                                                   4

4 Available static markers                                                                                   5

5 SystemTap Tapsets                                                                                          6

6 Examples                                                                                                   7



      author
           David Malcolm
      author
           Łukasz Langa
DTrace and SystemTap are monitoring tools, each providing a way to inspect what the processes on a computer
system are doing. They both use domain-specific languages allowing a user to write scripts which:
   • filter which processes are to be observed
   • gather data from the processes of interest
   • generate reports on the data
As of Python 3.6, CPython can be built with embedded “markers”, also known as “probes”, that can be observed by
a DTrace or SystemTap script, making it easier to monitor what the CPython processes on a system are doing.
CPython implementation detail: DTrace markers are implementation details of the CPython interpreter. No
guarantees are made about probe compatibility between versions of CPython. DTrace scripts can stop working or
work incorrectly without warning when changing CPython versions.




                                                      1

====================================
End of howto-instrumentation_toc.txt
====================================

====================================
 File: howto-ipaddress_toc.txt
====================================

                  An introduction to the ipaddress
                                            module
                                                                                               Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                    April 27, 2025
                                                                                  Python Software Foundation
                                                                                      Email: docs@python.org


Contents

1 Creating Address/Network/Interface objects                                                                        1
  1.1 A Note on IP Versions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       2
  1.2 IP Host Addresses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       2
  1.3 Defining Networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       2
  1.4 Host Interfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       3

2 Inspecting Address/Network/Interface Objects                                                                      3

3 Networks as lists of Addresses                                                                                    4

4 Comparisons                                                                                                       5

5 Using IP Addresses with other modules                                                                             5

6 Getting more detail when instance creation fails                                                                  5



      author
           Peter Moody
      author
           Nick Coghlan


 Overview

 This document aims to provide a gentle introduction to the ipaddress module. It is aimed primarily at users
 that aren’t already familiar with IP networking terminology, but may also be useful to network engineers wanting
 an overview of how ipaddress represents IP network addressing concepts.



1 Creating Address/Network/Interface objects
Since ipaddress is a module for inspecting and manipulating IP addresses, the first thing you’ll want to do is create
some objects. You can use ipaddress to create objects from strings and integers.




                                                         1

====================================
End of howto-ipaddress_toc.txt
====================================

====================================
 File: howto-isolating-extensions_toc.txt
====================================

                              Isolating Extension Modules
                                                                                              Release 3.13.3


                     Guido van Rossum and the Python development team


                                                                                                   April 27, 2025
                                                                                 Python Software Foundation
                                                                                     Email: docs@python.org


Contents

1 Who should read this                                                                                               2

2 Background                                                                                                         2
  2.1 Enter Per-Module State . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         2
  2.2 Isolated Module Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        2
  2.3 Surprising Edge Cases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        3

3 Making Modules Safe with Multiple Interpreters                                                                     3
  3.1 Managing Global State . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          3
  3.2 Managing Per-Module State . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          3
  3.3 Opt-Out: Limiting to One Module Object per Process . . . . . . . . . . . . . . . . . . . . . . . .             4
  3.4 Module State Access from Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           4

4 Heap Types                                                                                                         4
  4.1 Changing Static Types to Heap Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          5
  4.2 Defining Heap Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          5
  4.3 Garbage-Collection Protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          5
  4.4 Module State Access from Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           7
  4.5 Module State Access from Regular Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . .             7
  4.6 Module State Access from Slot Methods, Getters and Setters . . . . . . . . . . . . . . . . . . . . .           8
  4.7 Lifetime of the Module State . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         9

5 Open Issues                                                                                                        9
  5.1 Per-Class Scope . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        9
  5.2 Lossless Conversion to Heap Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          9




 Abstract

 Traditionally, state belonging to Python extension modules was kept in C static variables, which have process-
 wide scope. This document describes problems of such per-process state and shows a safer way: per-module
 state.
 The document also describes how to switch to per-module state where possible. This transition involves allocating
 space for that state, potentially switching from static types to heap types, and—perhaps most importantly—
 accessing per-module state from code.



                                                        1

====================================
End of howto-isolating-extensions_toc.txt
====================================

====================================
 File: howto-logging-cookbook_toc.txt
====================================

                                                         Logging Cookbook
                                                                                             Release 3.13.3


                     Guido van Rossum and the Python development team


                                                                                                  April 27, 2025
                                                                                Python Software Foundation
                                                                                    Email: docs@python.org


Contents

1 Using logging in multiple modules                                                                             3

2 Logging from multiple threads                                                                                 4

3 Multiple handlers and formatters                                                                              5

4 Logging to multiple destinations                                                                              6

5 Custom handling of levels                                                                                     7

6 Configuration server example                                                                                  10

7 Dealing with handlers that block                                                                              11

8 Sending and receiving logging events across a network                                                         12
  8.1 Running a logging socket listener in production . . . . . . . . . . . . . . . . . . . . . . . . . . . .   14

9 Adding contextual information to your logging output                                                          15
  9.1 Using LoggerAdapters to impart contextual information . . . . . . . . . . . . . . . . . . . . . . .       16
  9.2 Using Filters to impart contextual information . . . . . . . . . . . . . . . . . . . . . . . . . . . .    16

10 Use of contextvars                                                                                           18

11 Imparting contextual information in handlers                                                                 22

12 Logging to a single file from multiple processes                                                             22
   12.1 Using concurrent.futures.ProcessPoolExecutor . . . . . . . . . . . . . . . . . . . . . . . . . . . .    26
   12.2 Deploying Web applications using Gunicorn and uWSGI . . . . . . . . . . . . . . . . . . . . . . .       27

13 Using file rotation                                                                                          27

14 Use of alternative formatting styles                                                                         28

15 Customizing LogRecord                                                                                        30

16 Subclassing QueueHandler and QueueListener- a ZeroMQ example                                                 31
   16.1 Subclass QueueHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     31
   16.2 Subclass QueueListener . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      32




                                                        1

====================================
End of howto-logging-cookbook_toc.txt
====================================

====================================
 File: howto-logging_toc.txt
====================================

                                                                 Logging HOWTO
                                                                                               Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                   April 27, 2025
                                                                                 Python Software Foundation
                                                                                     Email: docs@python.org


Contents

1 Basic Logging Tutorial                                                                                          2
  1.1 When to use logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     2
  1.2 A simple example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      3
  1.3 Logging to a file . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   3
  1.4 Logging variable data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     4
  1.5 Changing the format of displayed messages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       4
  1.6 Displaying the date/time in messages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      5
  1.7 Next Steps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    5

2 Advanced Logging Tutorial                                                                                        5
  2.1 Logging Flow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       6
  2.2 Loggers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      7
  2.3 Handlers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     8
  2.4 Formatters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     9
  2.5 Configuring Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      9
  2.6 What happens if no configuration is provided . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      12
  2.7 Configuring Logging for a Library . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       12

3 Logging Levels                                                                                                  13
  3.1 Custom Levels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     14

4 Useful Handlers                                                                                                 14

5 Exceptions raised during logging                                                                                15

6 Using arbitrary objects as messages                                                                             15

7 Optimization                                                                                                    15

8 Other resources                                                                                                 16

Index                                                                                                             17



        Author
            Vinay Sajip <vinay_sajip at red-dove dot com>




                                                         1

====================================
End of howto-logging_toc.txt
====================================

====================================
 File: howto-mro_toc.txt
====================================

              The Python 2.3 Method Resolution
                                        Order
                                                                                                 Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                      April 27, 2025
                                                                                   Python Software Foundation
                                                                                       Email: docs@python.org


Contents

1 The beginning                                                                                                     2

2 The C3 Method Resolution Order                                                                                    3

3 Examples                                                                                                          4

4 Bad Method Resolution Orders                                                                                      6

5 The end                                                                                                           9

6 Resources                                                                                                         10




 ® Note

 This is a historical document, provided as an appendix to the official documentation. The Method Resolution
 Order discussed here was introduced in Python 2.3, but it is still used in later versions – including Python 3.


By Michele Simionato.
      Abstract
           This document is intended for Python programmers who want to understand the C3 Method Reso-
           lution Order used in Python 2.3. Although it is not intended for newbies, it is quite pedagogical with
           many worked out examples. I am not aware of other publicly available documents with the same
           scope, therefore it should be useful.
Disclaimer:
      I donate this document to the Python Software Foundation, under the Python 2.3 license. As usual in these
      circumstances, I warn the reader that what follows should be correct, but I don’t give any warranty. Use
      it at your own risk and peril!
Acknowledgments:
      All the people of the Python mailing list who sent me their support. Paul Foley who pointed out various
      imprecisions and made me to add the part on local precedence ordering. David Goodger for help with the



                                                          1

====================================
End of howto-mro_toc.txt
====================================

====================================
 File: howto-perf_profiling_toc.txt
====================================

               Python support for the Linux perf
                                         profiler
                                                                                                 Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                      April 27, 2025
                                                                                   Python Software Foundation
                                                                                       Email: docs@python.org


Contents

1 How to enable perf profiling support                                                                                  4

2 How to obtain the best results                                                                                        4

3 How to work without frame pointers                                                                                    5

Index                                                                                                                   7



        author
             Pablo Galindo
The Linux perf profiler is a very powerful tool that allows you to profile and obtain information about the performance
of your application. perf also has a very vibrant ecosystem of tools that aid with the analysis of the data that it
produces.
The main problem with using the perf profiler with Python applications is that perf only gets information about
native symbols, that is, the names of functions and procedures written in C. This means that the names and file names
of Python functions in your code will not appear in the output of perf.
Since Python 3.12, the interpreter can run in a special mode that allows Python functions to appear in the output of
the perf profiler. When this mode is enabled, the interpreter will interpose a small piece of code compiled on the
fly before the execution of every Python function and it will teach perf the relationship between this piece of code
and the associated Python function using perf map files.


 ® Note

 Support for the perf profiler is currently only available for Linux on select architectures. Check the output of the
 configure build step or check the output of python -m sysconfig | grep HAVE_PERF_TRAMPOLINE
 to see if your system is supported.


For example, consider the following script:

def foo(n):
    result = 0
                                                                                                  (continues on next page)



                                                          1

====================================
End of howto-perf_profiling_toc.txt
====================================

====================================
 File: howto-pyporting_toc.txt
====================================

How to port Python 2 Code to Python 3
                                                                                               Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                    April 27, 2025
                                                                                  Python Software Foundation
                                                                                      Email: docs@python.org


Contents

1 Third-party guides                                                                                               1

Index                                                                                                              2



        author
             Brett Cannon
Python 2 reached its official end-of-life at the start of 2020. This means that no new bug reports, fixes, or changes
will be made to Python 2 - it’s no longer supported: see PEP 373 and status of Python versions.
If you are looking to port an extension module instead of pure Python code, please see cporting-howto.
The archived python-porting mailing list may contain some useful guidance.
Since Python 3.11 the original porting guide was discontinued. You can find the old guide in the archive.


1 Third-party guides
There are also multiple third-party guides that might be useful:
    • Guide by Fedora
    • PyCon 2020 tutorial
    • Guide by DigitalOcean
    • Guide by ActiveState




                                                          1

====================================
End of howto-pyporting_toc.txt
====================================

====================================
 File: howto-regex_toc.txt
====================================

                               Regular Expression HOWTO
                                                                                               Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                   April 27, 2025
                                                                                 Python Software Foundation
                                                                                     Email: docs@python.org


Contents

1 Introduction                                                                                                    2

2 Simple Patterns                                                                                                 2
  2.1 Matching Characters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       2
  2.2 Repeating Things . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      3

3 Using Regular Expressions                                                                                       4
  3.1 Compiling Regular Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       4
  3.2 The Backslash Plague . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      5
  3.3 Performing Matches . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      5
  3.4 Module-Level Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      7
  3.5 Compilation Flags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     7

4 More Pattern Power                                                                                               9
  4.1 More Metacharacters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        9
  4.2 Grouping . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      11
  4.3 Non-capturing and Named Groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          12
  4.4 Lookahead Assertions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      13

5 Modifying Strings                                                                                               14
  5.1 Splitting Strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   14
  5.2 Search and Replace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      15

6 Common Problems                                                                                                 16
  6.1 Use String Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      17
  6.2 match() versus search() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     17
  6.3 Greedy versus Non-Greedy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        17
  6.4 Using re.VERBOSE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        18

7 Feedback                                                                                                        18



      Author
          A.M. Kuchling <amk@amk.ca>




                                                         1

====================================
End of howto-regex_toc.txt
====================================

====================================
 File: howto-sockets_toc.txt
====================================

                           Socket Programming HOWTO
                                                                                                     Release 3.13.3


                       Guido van Rossum and the Python development team


                                                                                                          April 27, 2025
                                                                                      Python Software Foundation
                                                                                          Email: docs@python.org


Contents

1 Sockets                                                                                                                    1
  1.1 History . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .              2

2 Creating a Socket                                                                                                          2
  2.1 IPC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .                3

3 Using a Socket                                                                                                             3
  3.1 Binary Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .                4

4 Disconnecting                                                                                                              5
  4.1 When Sockets Die . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .                 5

5 Non-blocking Sockets                                                                                                       5



      Author
          Gordon McMillan


 Abstract

 Sockets are used nearly everywhere, but are one of the most severely misunderstood technologies around. This is a
 10,000 foot overview of sockets. It’s not really a tutorial - you’ll still have work to do in getting things operational.
 It doesn’t cover the fine points (and there are a lot of them), but I hope it will give you enough background to
 begin using them decently.



1 Sockets
I’m only going to talk about INET (i.e. IPv4) sockets, but they account for at least 99% of the sockets in use. And I’ll
only talk about STREAM (i.e. TCP) sockets - unless you really know what you’re doing (in which case this HOWTO
isn’t for you!), you’ll get better behavior and performance from a STREAM socket than anything else. I will try to
clear up the mystery of what a socket is, as well as some hints on how to work with blocking and non-blocking sockets.
But I’ll start by talking about blocking sockets. You’ll need to know how they work before dealing with non-blocking
sockets.
Part of the trouble with understanding these things is that “socket” can mean a number of subtly different things,
depending on context. So first, let’s make a distinction between a “client” socket - an endpoint of a conversation, and


                                                            1

====================================
End of howto-sockets_toc.txt
====================================

====================================
 File: howto-sorting_toc.txt
====================================

                                                         Sorting Techniques
                                                                                                Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                       April 27, 2025
                                                                                  Python Software Foundation
                                                                                      Email: docs@python.org


Contents

1 Sorting Basics                                                                                                   1

2 Key Functions                                                                                                    2

3 Operator Module Functions and Partial Function Evaluation                                                        3

4 Ascending and Descending                                                                                         3

5 Sort Stability and Complex Sorts                                                                                 3

6 Decorate-Sort-Undecorate                                                                                         4

7 Comparison Functions                                                                                             5

8 Odds and Ends                                                                                                    5

9 Partial Sorts                                                                                                    6

Index                                                                                                              7



        Author
            Andrew Dalke and Raymond Hettinger
Python lists have a built-in list.sort() method that modifies the list in-place. There is also a sorted() built-in
function that builds a new sorted list from an iterable.
In this document, we explore the various techniques for sorting data using Python.


1 Sorting Basics
A simple ascending sort is very easy: just call the sorted() function. It returns a new sorted list:

>>> sorted([5, 2, 3, 1, 4])
[1, 2, 3, 4, 5]

You can also use the list.sort() method. It modifies the list in-place (and returns None to avoid confusion).
Usually it’s less convenient than sorted() - but if you don’t need the original list, it’s slightly more efficient.



                                                          1

====================================
End of howto-sorting_toc.txt
====================================

====================================
 File: howto-timerfd_toc.txt
====================================

                               timer file descriptor HOWTO
                                                                                               Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                    April 27, 2025
                                                                                  Python Software Foundation
                                                                                      Email: docs@python.org


Contents

1 Examples                                                                                                         1



       Release
            1.13
This HOWTO discusses Python’s support for the linux timer file descriptor.


1 Examples
The following example shows how to use a timer file descriptor to execute a function twice a second:

# Practical scripts should use really use a non-blocking timer,
# we use a blocking timer here for simplicity.
import os, time

# Create the timer file descriptor
fd = os.timerfd_create(time.CLOCK_REALTIME)

# Start the timer in 1 second, with an interval of half a second
os.timerfd_settime(fd, initial=1, interval=0.5)

try:
    # Process timer events four times.
    for _ in range(4):
        # read() will block until the timer expires
        _ = os.read(fd, 8)
        print("Timer expired")
finally:
    # Remember to close the timer file descriptor!
    os.close(fd)

To avoid the precision loss caused by the float type, timer file descriptors allow specifying initial expiration and
interval in integer nanoseconds with _ns variants of the functions.
This example shows how epoll() can be used with timer file descriptors to wait until the file descriptor is ready for
reading:


                                                         1

====================================
End of howto-timerfd_toc.txt
====================================

====================================
 File: howto-unicode_toc.txt
====================================

                                                                 Unicode HOWTO
                                                                                               Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                    April 27, 2025
                                                                                  Python Software Foundation
                                                                                      Email: docs@python.org


Contents

1 Introduction to Unicode                                                                                          1
  1.1 Definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    1
  1.2 Encodings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      2
  1.3 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     3

2 Python’s Unicode Support                                                                                         3
  2.1 The String Type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      4
  2.2 Converting to Bytes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      5
  2.3 Unicode Literals in Python Source Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         5
  2.4 Unicode Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       6
  2.5 Comparing Strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      6
  2.6 Unicode Regular Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        8
  2.7 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     8

3 Reading and Writing Unicode Data                                                                                 8
  3.1 Unicode filenames . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      9
  3.2 Tips for Writing Unicode-aware Programs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         10
  3.3 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    11

4 Acknowledgements                                                                                                11

Index                                                                                                             12



        Release
             1.12
This HOWTO discusses Python’s support for the Unicode specification for representing textual data, and explains
various problems that people commonly encounter when trying to work with Unicode.


1 Introduction to Unicode
1.1 Definitions
Today’s programs need to be able to handle a wide variety of characters. Applications are often internationalized to
display messages and output in a variety of user-selectable languages; the same program might need to output an error
message in English, French, Japanese, Hebrew, or Russian. Web content can be written in any of these languages



                                                         1

====================================
End of howto-unicode_toc.txt
====================================

====================================
 File: howto-urllib2_toc.txt
====================================

              HOWTO Fetch Internet Resources
                    Using The urllib Package
                                                                                              Release 3.13.3


                      Guido van Rossum and the Python development team


                                                                                                   April 27, 2025
                                                                                Python Software Foundation
                                                                                    Email: docs@python.org


Contents

1 Introduction                                                                                                   1

2 Fetching URLs                                                                                                  2
  2.1 Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   3
  2.2 Headers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    4

3 Handling Exceptions                                                                                            4
  3.1 URLError . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     4
  3.2 HTTPError . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      5
  3.3 Wrapping it Up . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     6

4 info and geturl                                                                                                7

5 Openers and Handlers                                                                                           7

6 Basic Authentication                                                                                           8

7 Proxies                                                                                                        9

8 Sockets and Layers                                                                                             9

9 Footnotes                                                                                                      10

Index                                                                                                            11



        Author
            Michael Foord


1 Introduction

 Related Articles

 You may also find useful the following article on fetching web resources with Python:



                                                        1

====================================
End of howto-urllib2_toc.txt
====================================

====================================
 File: installing_toc.txt
====================================

              Installing Python Modules
                                     Release 3.13.3




Guido van Rossum and the Python development team




                                           April 27, 2025




                              Python Software Foundation
                                  Email: docs@python.org
                                                                                                CONTENTS




1 Key terms                                                                                                       3

2 Basic usage                                                                                                     5

3 How do I …?                                                                                                     7
  3.1 … install pip in versions of Python prior to Python 3.4? . . . . . . . . . . . . . . . . . . . . . .        7
  3.2 … install packages just for the current user? . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     7
  3.3 … install scientific Python packages? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     7
  3.4 … work with multiple versions of Python installed in parallel? . . . . . . . . . . . . . . . . . . .        7

4 Common installation issues                                                                                      9
  4.1 Installing into the system Python on Linux . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      9
  4.2 Pip not installed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   9
  4.3 Installing binary extensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    9

A Glossary                                                                                                        11

B About this documentation                                                                                        29
  B.1 Contributors to the Python documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        29

C History and License                                                                                             31
  C.1 History of the software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     31
  C.2 Terms and conditions for accessing or otherwise using Python . . . . . . . . . . . . . . . . . . . .        32
        C.2.1 PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2 . . . . . . . . . . . . .                              32
        C.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0 . . . . . . . . . . . . . .                             33
        C.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1 . . . . . . . . . . . . . . . . . .                         33
        C.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2 . . . . . . . . . .                              34
        C.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION .                                      35
  C.3 Licenses and Acknowledgements for Incorporated Software . . . . . . . . . . . . . . . . . . . . .           35
        C.3.1 Mersenne Twister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        35
        C.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       36
        C.3.3 Asynchronous socket services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        37
        C.3.4 Cookie management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         37
        C.3.5 Execution tracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       37
        C.3.6 UUencode and UUdecode functions . . . . . . . . . . . . . . . . . . . . . . . . . . . .             38
        C.3.7 XML Remote Procedure Calls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            39
        C.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      39
        C.3.9 Select kqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       40
        C.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      40
        C.3.11 strtod and dtoa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    41
        C.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        41
        C.3.13 expat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    44
        C.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   45
        C.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     45
        C.3.16 cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      46


                                                                                                                   i
        C.3.17   libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    46
        C.3.18   W3C C14N test suite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     47
        C.3.19   mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    48
        C.3.20   asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   48
        C.3.21   Global Unbounded Sequences (GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . .        48

D Copyright                                                                                                      51

Index                                                                                                            53




ii
                                                                    Installing Python Modules, Release 3.13.3


      Email
          distutils-sig@python.org
As a popular open source development project, Python has an active supporting community of contributors and users
that also make their software available for other Python developers to use under open source license terms.
This allows Python users to share and collaborate effectively, benefiting from the solutions others have already created
to common (and sometimes even rare!) problems, as well as potentially contributing their own solutions to the
common pool.
This guide covers the installation part of the process. For a guide to creating and sharing your own Python projects,
refer to the Python packaging user guide.


 ® Note

 For corporate and other institutional users, be aware that many organisations have their own policies around
 using and contributing to open source software. Please take such policies into account when making use of the
 distribution and installation tools provided with Python.




CONTENTS                                                                                                              1
Installing Python Modules, Release 3.13.3




2                                           CONTENTS

====================================
End of installing_toc.txt
====================================

====================================
 File: library_toc.txt
====================================

         The Python Library Reference
                                     Release 3.13.3




Guido van Rossum and the Python development team




                                           April 27, 2025




                              Python Software Foundation
                                  Email: docs@python.org
                                                                                               CONTENTS




1 Introduction                                                                                                   3
  1.1 Notes on availability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    3
        1.1.1 WebAssembly platforms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          4
        1.1.2 Mobile platforms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       4

2 Built-in Functions                                                                                             7

3 Built-in Constants                                                                                             35
  3.1 Constants added by the site module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         36

4 Built-in Types                                                                                                 37
  4.1 Truth Value Testing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    37
  4.2 Boolean Operations — and, or, not . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        37
  4.3 Comparisons . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      38
  4.4 Numeric Types — int, float, complex . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            38
         4.4.1 Bitwise Operations on Integer Types . . . . . . . . . . . . . . . . . . . . . . . . . . . .       40
         4.4.2 Additional Methods on Integer Types . . . . . . . . . . . . . . . . . . . . . . . . . . . .       40
         4.4.3 Additional Methods on Float . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       42
         4.4.4 Hashing of numeric types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      43
  4.5 Boolean Type - bool . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      45
  4.6 Iterator Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   45
         4.6.1 Generator Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     46
  4.7 Sequence Types — list, tuple, range . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            46
         4.7.1 Common Sequence Operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          46
         4.7.2 Immutable Sequence Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        48
         4.7.3 Mutable Sequence Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        48
         4.7.4 Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   49
         4.7.5 Tuples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    49
         4.7.6 Ranges . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    50
  4.8 Text Sequence Type — str . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         51
         4.8.1 String Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      52
         4.8.2 Formatted String Literals (f-strings) . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   61
         4.8.3 printf-style String Formatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      62
  4.9 Binary Sequence Types — bytes, bytearray, memoryview . . . . . . . . . . . . . . . . . . .                 64
         4.9.1 Bytes Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     65
         4.9.2 Bytearray Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     66
         4.9.3 Bytes and Bytearray Operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      67
         4.9.4 printf-style Bytes Formatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       78
         4.9.5 Memory Views . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        80
  4.10 Set Types — set, frozenset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        87
  4.11 Mapping Types — dict . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        89
         4.11.1 Dictionary view objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    93
  4.12 Context Manager Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       94
  4.13 Type Annotation Types — Generic Alias, Union . . . . . . . . . . . . . . . . . . . . . . . . . . .        95



                                                                                                                  i
          4.13.1 Generic Alias Type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95
          4.13.2 Union Type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
     4.14 Other Built-in Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
          4.14.1 Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
          4.14.2 Classes and Class Instances . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
          4.14.3 Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
          4.14.4 Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
          4.14.5 Code Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
          4.14.6 Type Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
          4.14.7 The Null Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
          4.14.8 The Ellipsis Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
          4.14.9 The NotImplemented Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
          4.14.10 Internal Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
     4.15 Special Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
     4.16 Integer string conversion length limitation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103
          4.16.1 Affected APIs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
          4.16.2 Configuring the limit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
          4.16.3 Recommended configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105

5 Built-in Exceptions                                                                                          107
  5.1 Exception context . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
  5.2 Inheriting from built-in exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
  5.3 Base classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 108
  5.4 Concrete exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
         5.4.1 OS exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
  5.5 Warnings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
  5.6 Exception groups . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
  5.7 Exception hierarchy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118

6 Text Processing Services                                                                                      121
  6.1 string — Common string operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
        6.1.1 String constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
        6.1.2 Custom String Formatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
        6.1.3 Format String Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
        6.1.4 Template strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
        6.1.5 Helper functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
  6.2 re — Regular expression operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 132
        6.2.1 Regular Expression Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
        6.2.2 Module Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 140
        6.2.3 Regular Expression Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
        6.2.4 Match Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147
        6.2.5 Regular Expression Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150
  6.3 difflib — Helpers for computing deltas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 155
        6.3.1 SequenceMatcher Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 159
        6.3.2 SequenceMatcher Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162
        6.3.3 Differ Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
        6.3.4 Differ Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
        6.3.5 A command-line interface to difflib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 164
        6.3.6 ndiff example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165
  6.4 textwrap — Text wrapping and filling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168
  6.5 unicodedata — Unicode Database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171
  6.6 stringprep — Internet String Preparation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
  6.7 readline — GNU readline interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 174
        6.7.1 Init file . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
        6.7.2 Line buffer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
        6.7.3 History file . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 175
        6.7.4 History list . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176
        6.7.5 Startup hooks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 176



ii
          6.7.6 Completion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
          6.7.7 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
   6.8    rlcompleter — Completion function for GNU readline . . . . . . . . . . . . . . . . . . . . . . 179

7 Binary Data Services                                                                                      181
  7.1 struct — Interpret bytes as packed binary data . . . . . . . . . . . . . . . . . . . . . . . . . . 181
       7.1.1 Functions and Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
       7.1.2 Format Strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
       7.1.3 Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
       7.1.4 Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
  7.2 codecs — Codec registry and base classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
       7.2.1 Codec Base Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 191
       7.2.2 Encodings and Unicode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 197
       7.2.3 Standard Encodings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 199
       7.2.4 Python Specific Encodings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 201
       7.2.5 encodings.idna — Internationalized Domain Names in Applications . . . . . . . . . . 203
       7.2.6 encodings.mbcs — Windows ANSI codepage . . . . . . . . . . . . . . . . . . . . . . 204
       7.2.7 encodings.utf_8_sig — UTF-8 codec with BOM signature . . . . . . . . . . . . . . 204

8 Data Types                                                                                                205
  8.1 datetime — Basic date and time types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
       8.1.1 Aware and Naive Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 205
       8.1.2 Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
       8.1.3 Available Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 206
       8.1.4 timedelta Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 207
       8.1.5 date Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 210
       8.1.6 datetime Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 215
       8.1.7 time Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 227
       8.1.8 tzinfo Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 230
       8.1.9 timezone Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 237
       8.1.10 strftime() and strptime() Behavior . . . . . . . . . . . . . . . . . . . . . . . . . 238
  8.2 zoneinfo — IANA time zone support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242
       8.2.1 Using ZoneInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 242
       8.2.2 Data sources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243
       8.2.3 The ZoneInfo class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 244
       8.2.4 Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246
       8.2.5 Globals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 246
       8.2.6 Exceptions and warnings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 247
  8.3 calendar — General calendar-related functions . . . . . . . . . . . . . . . . . . . . . . . . . . 247
       8.3.1 Command-Line Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 253
  8.4 collections — Container datatypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255
       8.4.1 ChainMap objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 255
       8.4.2 Counter objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 257
       8.4.3 deque objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
       8.4.4 defaultdict objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 264
       8.4.5 namedtuple() Factory Function for Tuples with Named Fields . . . . . . . . . . . . . 266
       8.4.6 OrderedDict objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 269
       8.4.7 UserDict objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271
       8.4.8 UserList objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272
       8.4.9 UserString objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 272
  8.5 collections.abc — Abstract Base Classes for Containers . . . . . . . . . . . . . . . . . . . . 272
       8.5.1 Collections Abstract Base Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 274
       8.5.2 Collections Abstract Base Classes – Detailed Descriptions . . . . . . . . . . . . . . . . . 275
       8.5.3 Examples and Recipes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 277
  8.6 heapq — Heap queue algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 278
       8.6.1 Basic Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279
       8.6.2 Priority Queue Implementation Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279
       8.6.3 Theory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 280



                                                                                                              iii
     8.7    bisect — Array bisection algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281
            8.7.1  Performance Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283
            8.7.2  Searching Sorted Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283
            8.7.3  Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284
     8.8    array — Efficient arrays of numeric values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 285
     8.9    weakref — Weak references . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 288
            8.9.1 Weak Reference Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 292
            8.9.2 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293
            8.9.3 Finalizer Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 293
            8.9.4 Comparing finalizers with __del__() methods . . . . . . . . . . . . . . . . . . . . . . 294
     8.10   types — Dynamic type creation and names for built-in types . . . . . . . . . . . . . . . . . . . . 295
            8.10.1 Dynamic Type Creation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 296
            8.10.2 Standard Interpreter Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297
            8.10.3 Additional Utility Classes and Functions . . . . . . . . . . . . . . . . . . . . . . . . . . 301
            8.10.4 Coroutine Utility Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301
     8.11   copy — Shallow and deep copy operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 302
     8.12   pprint — Data pretty printer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303
            8.12.1 Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303
            8.12.2 PrettyPrinter Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 304
            8.12.3 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 306
     8.13   reprlib — Alternate repr() implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . 309
            8.13.1 Repr Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 310
            8.13.2 Subclassing Repr Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311
     8.14   enum — Support for enumerations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 312
            8.14.1 Module Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313
            8.14.2 Data Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 314
            8.14.3 Utilities and Decorators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 325
            8.14.4 Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327
     8.15   graphlib — Functionality to operate with graph-like structures . . . . . . . . . . . . . . . . . . 327
            8.15.1 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 329

9 Numeric and Mathematical Modules                                                                         331
  9.1 numbers — Numeric abstract base classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331
      9.1.1 The numeric tower . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 331
      9.1.2 Notes for type implementers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 332
  9.2 math — Mathematical functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334
      9.2.1 Number-theoretic functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 335
      9.2.2 Floating point arithmetic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 336
      9.2.3 Floating point manipulation functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 337
      9.2.4 Power, exponential and logarithmic functions . . . . . . . . . . . . . . . . . . . . . . . . 339
      9.2.5 Summation and product functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 340
      9.2.6 Angular conversion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341
      9.2.7 Trigonometric functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341
      9.2.8 Hyperbolic functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341
      9.2.9 Special functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 342
      9.2.10 Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 342
  9.3 cmath — Mathematical functions for complex numbers . . . . . . . . . . . . . . . . . . . . . . . 343
      9.3.1 Conversions to and from polar coordinates . . . . . . . . . . . . . . . . . . . . . . . . . 344
      9.3.2 Power and logarithmic functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 345
      9.3.3 Trigonometric functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 345
      9.3.4 Hyperbolic functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346
      9.3.5 Classification functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346
      9.3.6 Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 347
  9.4 decimal — Decimal fixed-point and floating-point arithmetic . . . . . . . . . . . . . . . . . . . 347
      9.4.1 Quick-start Tutorial . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 349
      9.4.2 Decimal objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 352
      9.4.3 Context objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 359
      9.4.4 Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 365


iv
          9.4.5  Rounding modes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 366
          9.4.6  Signals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 366
          9.4.7  Floating-Point Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 368
          9.4.8  Working with threads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 369
          9.4.9  Recipes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 370
          9.4.10 Decimal FAQ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 373
   9.5    fractions — Rational numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 376
   9.6    random — Generate pseudo-random numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . 379
          9.6.1 Bookkeeping functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 380
          9.6.2 Functions for bytes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 380
          9.6.3 Functions for integers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 381
          9.6.4 Functions for sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 381
          9.6.5 Discrete distributions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 382
          9.6.6 Real-valued distributions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 382
          9.6.7 Alternative Generator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384
          9.6.8 Notes on Reproducibility . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384
          9.6.9 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 384
          9.6.10 Recipes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 387
          9.6.11 Command-line usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 388
          9.6.12 Command-line example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 388
   9.7    statistics — Mathematical statistics functions . . . . . . . . . . . . . . . . . . . . . . . . . . 389
          9.7.1 Averages and measures of central location . . . . . . . . . . . . . . . . . . . . . . . . . 390
          9.7.2 Measures of spread . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 390
          9.7.3 Statistics for relations between two inputs . . . . . . . . . . . . . . . . . . . . . . . . . . 390
          9.7.4 Function details . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 390
          9.7.5 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 400
          9.7.6 NormalDist objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 400
          9.7.7 Examples and Recipes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 402

10 Functional Programming Modules                                                                              405
   10.1 itertools — Functions creating iterators for efficient looping . . . . . . . . . . . . . . . . . . . 405
        10.1.1 Itertool Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 407
        10.1.2 Itertools Recipes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 417
   10.2 functools — Higher-order functions and operations on callable objects . . . . . . . . . . . . . . 422
        10.2.1 partial Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 432
   10.3 operator — Standard operators as functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 433
        10.3.1 Mapping Operators to Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 437
        10.3.2 In-place Operators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 438

11 File and Directory Access                                                                                   441
   11.1 pathlib — Object-oriented filesystem paths . . . . . . . . . . . . . . . . . . . . . . . . . . . . 441
         11.1.1 Basic use . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 442
         11.1.2 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 443
         11.1.3 Pure paths . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 443
         11.1.4 Concrete paths . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 452
         11.1.5 Pattern language . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 463
         11.1.6 Comparison to the glob module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 464
         11.1.7 Comparison to the os and os.path modules . . . . . . . . . . . . . . . . . . . . . . . . 464
   11.2 os.path — Common pathname manipulations . . . . . . . . . . . . . . . . . . . . . . . . . . . 466
   11.3 stat — Interpreting stat() results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 472
   11.4 filecmp — File and Directory Comparisons . . . . . . . . . . . . . . . . . . . . . . . . . . . . 478
         11.4.1 The dircmp class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 479
   11.5 tempfile — Generate temporary files and directories . . . . . . . . . . . . . . . . . . . . . . . 480
         11.5.1 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 484
         11.5.2 Deprecated functions and variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 485
   11.6 glob — Unix style pathname pattern expansion . . . . . . . . . . . . . . . . . . . . . . . . . . . 486
         11.6.1 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 487
   11.7 fnmatch — Unix filename pattern matching . . . . . . . . . . . . . . . . . . . . . . . . . . . . 488



                                                                                                                  v
     11.8 linecache — Random access to text lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 489
     11.9 shutil — High-level file operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 490
          11.9.1 Directory and files operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 490
          11.9.2 Archiving operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 496
          11.9.3 Querying the size of the output terminal . . . . . . . . . . . . . . . . . . . . . . . . . . 500

12 Data Persistence                                                                                           501
   12.1 pickle — Python object serialization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 501
        12.1.1 Relationship to other Python modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . 501
        12.1.2 Data stream format . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 502
        12.1.3 Module Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 503
        12.1.4 What can be pickled and unpickled? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 506
        12.1.5 Pickling Class Instances . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 507
        12.1.6 Custom Reduction for Types, Functions, and Other Objects . . . . . . . . . . . . . . . . 513
        12.1.7 Out-of-band Buffers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 513
        12.1.8 Restricting Globals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 515
        12.1.9 Performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 516
        12.1.10 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 516
   12.2 copyreg — Register pickle support functions . . . . . . . . . . . . . . . . . . . . . . . . . . . 517
        12.2.1 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517
   12.3 shelve — Python object persistence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518
        12.3.1 Restrictions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 519
        12.3.2 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 520
   12.4 marshal — Internal Python object serialization . . . . . . . . . . . . . . . . . . . . . . . . . . . 520
   12.5 dbm — Interfaces to Unix “databases” . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 522
        12.5.1 dbm.sqlite3 — SQLite backend for dbm . . . . . . . . . . . . . . . . . . . . . . . . 524
        12.5.2 dbm.gnu — GNU database manager . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524
        12.5.3 dbm.ndbm — New Database Manager . . . . . . . . . . . . . . . . . . . . . . . . . . . 526
        12.5.4 dbm.dumb — Portable DBM implementation . . . . . . . . . . . . . . . . . . . . . . . 527
   12.6 sqlite3 — DB-API 2.0 interface for SQLite databases . . . . . . . . . . . . . . . . . . . . . . 528
        12.6.1 Tutorial . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 528
        12.6.2 Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 530
        12.6.3 How-to guides . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 551
        12.6.4 Explanation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 558

13 Data Compression and Archiving                                                                             561
   13.1 zlib — Compression compatible with gzip . . . . . . . . . . . . . . . . . . . . . . . . . . . . 561
   13.2 gzip — Support for gzip files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 565
        13.2.1 Examples of usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 567
        13.2.2 Command Line Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 568
   13.3 bz2 — Support for bzip2 compression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 568
        13.3.1 (De)compression of files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 568
        13.3.2 Incremental (de)compression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 570
        13.3.3 One-shot (de)compression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 571
        13.3.4 Examples of usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 571
   13.4 lzma — Compression using the LZMA algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . 573
        13.4.1 Reading and writing compressed files . . . . . . . . . . . . . . . . . . . . . . . . . . . . 573
        13.4.2 Compressing and decompressing data in memory . . . . . . . . . . . . . . . . . . . . . . 574
        13.4.3 Miscellaneous . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 576
        13.4.4 Specifying custom filter chains . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 576
        13.4.5 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 577
   13.5 zipfile — Work with ZIP archives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 578
        13.5.1 ZipFile Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 580
        13.5.2 Path Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 584
        13.5.3 PyZipFile Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 585
        13.5.4 ZipInfo Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 586
        13.5.5 Command-Line Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 588
        13.5.6 Decompression pitfalls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 589



vi
   13.6 tarfile — Read and write tar archive files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 589
        13.6.1 TarFile Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 593
        13.6.2 TarInfo Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 596
        13.6.3 Extraction filters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 599
        13.6.4 Command-Line Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 602
        13.6.5 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 603
        13.6.6 Supported tar formats . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 604
        13.6.7 Unicode issues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 604

14 File Formats                                                                                                 607
   14.1 csv — CSV File Reading and Writing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 607
         14.1.1 Module Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 607
         14.1.2 Dialects and Formatting Parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 611
         14.1.3 Reader Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 612
         14.1.4 Writer Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 612
         14.1.5 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 613
   14.2 configparser — Configuration file parser . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 614
         14.2.1 Quick Start . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 615
         14.2.2 Supported Datatypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 616
         14.2.3 Fallback Values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 617
         14.2.4 Supported INI File Structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 617
         14.2.5 Unnamed Sections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 619
         14.2.6 Interpolation of values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 619
         14.2.7 Mapping Protocol Access . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 620
         14.2.8 Customizing Parser Behaviour . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 621
         14.2.9 Legacy API Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 625
         14.2.10 ConfigParser Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 627
         14.2.11 RawConfigParser Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 631
         14.2.12 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 632
   14.3 tomllib — Parse TOML files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 632
         14.3.1 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 633
         14.3.2 Conversion Table . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 634
   14.4 netrc — netrc file processing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 634
         14.4.1 netrc Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 635
   14.5 plistlib — Generate and parse Apple .plist files . . . . . . . . . . . . . . . . . . . . . . . . 635
         14.5.1 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 637

15 Cryptographic Services                                                                                     639
   15.1 hashlib — Secure hashes and message digests . . . . . . . . . . . . . . . . . . . . . . . . . . . 639
        15.1.1 Hash algorithms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 639
        15.1.2 Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 640
        15.1.3 Constructors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 640
        15.1.4 Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 641
        15.1.5 Hash Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 641
        15.1.6 SHAKE variable length digests . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 641
        15.1.7 File hashing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 642
        15.1.8 Key derivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 642
        15.1.9 BLAKE2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 643
   15.2 hmac — Keyed-Hashing for Message Authentication . . . . . . . . . . . . . . . . . . . . . . . . 650
   15.3 secrets — Generate secure random numbers for managing secrets . . . . . . . . . . . . . . . . 652
        15.3.1 Random numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 652
        15.3.2 Generating tokens . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 652
        15.3.3 Other functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 653
        15.3.4 Recipes and best practices . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 653

16 Generic Operating System Services                                                                         655
   16.1 os — Miscellaneous operating system interfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . 655
        16.1.1 File Names, Command Line Arguments, and Environment Variables . . . . . . . . . . . 656
        16.1.2 Python UTF-8 Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 656


                                                                                                                vii
              16.1.3 Process Parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 657
              16.1.4 File Object Creation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 664
              16.1.5 File Descriptor Operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 664
              16.1.6 Files and Directories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 677
              16.1.7 Process Management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 703
              16.1.8 Interface to the scheduler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 716
              16.1.9 Miscellaneous System Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 718
              16.1.10 Random numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 719
       16.2   io — Core tools for working with streams . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 721
              16.2.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 721
              16.2.2 Text Encoding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 722
              16.2.3 High-level Module Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 722
              16.2.4 Class hierarchy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 723
              16.2.5 Performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 733
       16.3   time — Time access and conversions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 734
              16.3.1 Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 735
              16.3.2 Clock ID Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 744
              16.3.3 Timezone Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 746
       16.4   logging — Logging facility for Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 746
              16.4.1 Logger Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 748
              16.4.2 Logging Levels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 752
              16.4.3 Handler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 753
              16.4.4 Formatter Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 755
              16.4.5 Filter Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 756
              16.4.6 LogRecord Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 757
              16.4.7 LogRecord attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 758
              16.4.8 LoggerAdapter Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 760
              16.4.9 Thread Safety . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 760
              16.4.10 Module-Level Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 760
              16.4.11 Module-Level Attributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 764
              16.4.12 Integration with the warnings module . . . . . . . . . . . . . . . . . . . . . . . . . . . . 765
       16.5   logging.config — Logging configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . 765
              16.5.1 Configuration functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 766
              16.5.2 Security considerations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 768
              16.5.3 Configuration dictionary schema . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 768
              16.5.4 Configuration file format . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 775
       16.6   logging.handlers — Logging handlers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 777
              16.6.1 StreamHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 778
              16.6.2 FileHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 778
              16.6.3 NullHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 779
              16.6.4 WatchedFileHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 779
              16.6.5 BaseRotatingHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 780
              16.6.6 RotatingFileHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 781
              16.6.7 TimedRotatingFileHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 781
              16.6.8 SocketHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 783
              16.6.9 DatagramHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 784
              16.6.10 SysLogHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 784
              16.6.11 NTEventLogHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 786
              16.6.12 SMTPHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 787
              16.6.13 MemoryHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 787
              16.6.14 HTTPHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 788
              16.6.15 QueueHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 789
              16.6.16 QueueListener . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 790
       16.7   platform — Access to underlying platform’s identifying data . . . . . . . . . . . . . . . . . . . 791
              16.7.1 Cross Platform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 791
              16.7.2 Java Platform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 793
              16.7.3 Windows Platform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 793
              16.7.4 macOS Platform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 794


viii
          16.7.5
               iOS Platform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 794
          16.7.6
               Unix Platforms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 794
          16.7.7
               Linux Platforms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 794
          16.7.8
               Android Platform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 795
   16.8 errno — Standard errno system symbols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 795
   16.9 ctypes — A foreign function library for Python . . . . . . . . . . . . . . . . . . . . . . . . . . 803
        16.9.1 ctypes tutorial . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 803
        16.9.2 ctypes reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 821

17 Command Line Interface Libraries                                                                            837
   17.1 argparse — Parser for command-line options, arguments and subcommands . . . . . . . . . . . 837
        17.1.1 ArgumentParser objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 838
        17.1.2 The add_argument() method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 845
        17.1.3 The parse_args() method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 855
        17.1.4 Other utilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 858
        17.1.5 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 867
   17.2 optparse — Parser for command line options . . . . . . . . . . . . . . . . . . . . . . . . . . . 881
        17.2.1 Choosing an argument parsing library . . . . . . . . . . . . . . . . . . . . . . . . . . . . 881
        17.2.2 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 882
        17.2.3 Background . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 883
        17.2.4 Tutorial . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 885
        17.2.5 Reference Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 892
        17.2.6 Option Callbacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 901
        17.2.7 Extending optparse . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 905
        17.2.8 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 908
   17.3 getpass — Portable password input . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 908
   17.4 fileinput — Iterate over lines from multiple input streams . . . . . . . . . . . . . . . . . . . . 909
   17.5 curses — Terminal handling for character-cell displays . . . . . . . . . . . . . . . . . . . . . . 911
        17.5.1 Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 912
        17.5.2 Window Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 918
        17.5.3 Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 925
   17.6 curses.textpad — Text input widget for curses programs . . . . . . . . . . . . . . . . . . . . 936
        17.6.1 Textbox objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 936
   17.7 curses.ascii — Utilities for ASCII characters . . . . . . . . . . . . . . . . . . . . . . . . . . 937
   17.8 curses.panel — A panel stack extension for curses . . . . . . . . . . . . . . . . . . . . . . . . 941
        17.8.1 Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 941
        17.8.2 Panel Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 941

18 Concurrent Execution                                                                                       943
   18.1 threading — Thread-based parallelism . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 943
        18.1.1 Thread-Local Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 946
        18.1.2 Thread Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 946
        18.1.3 Lock Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 949
        18.1.4 RLock Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 950
        18.1.5 Condition Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 951
        18.1.6 Semaphore Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 953
        18.1.7 Event Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 954
        18.1.8 Timer Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 955
        18.1.9 Barrier Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 955
        18.1.10 Using locks, conditions, and semaphores in the with statement . . . . . . . . . . . . . . 956
   18.2 multiprocessing — Process-based parallelism . . . . . . . . . . . . . . . . . . . . . . . . . . 957
        18.2.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 957
        18.2.2 Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 964
        18.2.3 Programming guidelines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 992
        18.2.4 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 995
   18.3 multiprocessing.shared_memory — Shared memory for direct access across processes . . . 1001
   18.4 The concurrent package . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1007
   18.5 concurrent.futures — Launching parallel tasks . . . . . . . . . . . . . . . . . . . . . . . . 1007



                                                                                                               ix
          18.5.1 Executor Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1007
          18.5.2 ThreadPoolExecutor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1008
          18.5.3 ProcessPoolExecutor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1010
          18.5.4 Future Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1012
          18.5.5 Module Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1013
          18.5.6 Exception classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1014
    18.6 subprocess — Subprocess management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1014
          18.6.1 Using the subprocess Module . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1014
          18.6.2 Security Considerations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1023
          18.6.3 Popen Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1023
          18.6.4 Windows Popen Helpers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1025
          18.6.5 Older high-level API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1028
          18.6.6 Replacing Older Functions with the subprocess Module . . . . . . . . . . . . . . . . . 1029
          18.6.7 Legacy Shell Invocation Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1032
          18.6.8 Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1033
    18.7 sched — Event scheduler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1034
          18.7.1 Scheduler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1035
    18.8 queue — A synchronized queue class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1036
          18.8.1 Queue Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1037
          18.8.2 SimpleQueue Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1038
    18.9 contextvars — Context Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1039
          18.9.1 Context Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1039
          18.9.2 Manual Context Management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1040
          18.9.3 asyncio support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1042
    18.10 _thread — Low-level threading API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1043

19 Networking and Interprocess Communication                                                                  1047
   19.1 asyncio — Asynchronous I/O . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1047
        19.1.1 Runners . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1048
        19.1.2 Coroutines and Tasks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1050
        19.1.3 Streams . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1069
        19.1.4 Synchronization Primitives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1077
        19.1.5 Subprocesses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1082
        19.1.6 Queues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1087
        19.1.7 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1090
        19.1.8 Event Loop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1091
        19.1.9 Futures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1114
        19.1.10 Transports and Protocols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1117
        19.1.11 Policies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1131
        19.1.12 Platform Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1134
        19.1.13 Extending . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1136
        19.1.14 High-level API Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1137
        19.1.15 Low-level API Index . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1139
        19.1.16 Developing with asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1143
   19.2 socket — Low-level networking interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1146
        19.2.1 Socket families . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1147
        19.2.2 Module contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1150
        19.2.3 Socket Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1163
        19.2.4 Notes on socket timeouts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1170
        19.2.5 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1171
   19.3 ssl — TLS/SSL wrapper for socket objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1174
        19.3.1 Functions, Constants, and Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1175
        19.3.2 SSL Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1186
        19.3.3 SSL Contexts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1191
        19.3.4 Certificates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1200
        19.3.5 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1201
        19.3.6 Notes on non-blocking sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1204
        19.3.7 Memory BIO Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1205


x
          19.3.8 SSL session . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1207
          19.3.9 Security considerations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1207
          19.3.10 TLS 1.3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1208
   19.4   select — Waiting for I/O completion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1209
          19.4.1 /dev/poll Polling Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1211
          19.4.2 Edge and Level Trigger Polling (epoll) Objects . . . . . . . . . . . . . . . . . . . . . . . 1212
          19.4.3 Polling Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1213
          19.4.4 Kqueue Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1214
          19.4.5 Kevent Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1214
   19.5   selectors — High-level I/O multiplexing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1216
          19.5.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1216
          19.5.2 Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1216
          19.5.3 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1219
   19.6   signal — Set handlers for asynchronous events . . . . . . . . . . . . . . . . . . . . . . . . . . 1219
          19.6.1 General rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1219
          19.6.2 Module contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1220
          19.6.3 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1227
          19.6.4 Note on SIGPIPE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1227
          19.6.5 Note on Signal Handlers and Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . 1228
   19.7   mmap — Memory-mapped file support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1229
          19.7.1 MADV_* Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1233
          19.7.2 MAP_* Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1233

20 Internet Data Handling                                                                                     1235
   20.1 email — An email and MIME handling package . . . . . . . . . . . . . . . . . . . . . . . . . . 1235
         20.1.1 email.message: Representing an email message . . . . . . . . . . . . . . . . . . . . . 1236
         20.1.2 email.parser: Parsing email messages . . . . . . . . . . . . . . . . . . . . . . . . . . 1244
         20.1.3 email.generator: Generating MIME documents . . . . . . . . . . . . . . . . . . . . 1247
         20.1.4 email.policy: Policy Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1250
         20.1.5 email.errors: Exception and Defect classes . . . . . . . . . . . . . . . . . . . . . . . 1256
         20.1.6 email.headerregistry: Custom Header Objects . . . . . . . . . . . . . . . . . . . . 1258
         20.1.7 email.contentmanager: Managing MIME Content . . . . . . . . . . . . . . . . . . . 1263
         20.1.8 email: Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1266
         20.1.9 email.message.Message: Representing an email message using the compat32 API . 1272
         20.1.10 email.mime: Creating email and MIME objects from scratch . . . . . . . . . . . . . . . 1280
         20.1.11 email.header: Internationalized headers . . . . . . . . . . . . . . . . . . . . . . . . . 1283
         20.1.12 email.charset: Representing character sets . . . . . . . . . . . . . . . . . . . . . . . 1285
         20.1.13 email.encoders: Encoders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1287
         20.1.14 email.utils: Miscellaneous utilities . . . . . . . . . . . . . . . . . . . . . . . . . . . 1288
         20.1.15 email.iterators: Iterators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1290
   20.2 json — JSON encoder and decoder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1291
         20.2.1 Basic Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1294
         20.2.2 Encoders and Decoders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1296
         20.2.3 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1298
         20.2.4 Standard Compliance and Interoperability . . . . . . . . . . . . . . . . . . . . . . . . . 1299
         20.2.5 Command Line Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1300
   20.3 mailbox — Manipulate mailboxes in various formats . . . . . . . . . . . . . . . . . . . . . . . . 1301
         20.3.1 Mailbox objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1302
         20.3.2 Message objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1311
         20.3.3 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1319
         20.3.4 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1319
   20.4 mimetypes — Map filenames to MIME types . . . . . . . . . . . . . . . . . . . . . . . . . . . 1320
         20.4.1 MimeTypes Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1322
   20.5 base64 — Base16, Base32, Base64, Base85 Data Encodings . . . . . . . . . . . . . . . . . . . . 1323
         20.5.1 Security Considerations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1327
   20.6 binascii — Convert between binary and ASCII . . . . . . . . . . . . . . . . . . . . . . . . . . 1327
   20.7 quopri — Encode and decode MIME quoted-printable data . . . . . . . . . . . . . . . . . . . . 1329




                                                                                                                xi
21 Structured Markup Processing Tools                                                                         1331
   21.1 html — HyperText Markup Language support . . . . . . . . . . . . . . . . . . . . . . . . . . . 1331
   21.2 html.parser — Simple HTML and XHTML parser . . . . . . . . . . . . . . . . . . . . . . . . 1331
         21.2.1 Example HTML Parser Application . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1332
         21.2.2 HTMLParser Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1332
         21.2.3 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1334
   21.3 html.entities — Definitions of HTML general entities . . . . . . . . . . . . . . . . . . . . . 1336
   21.4 XML Processing Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1336
         21.4.1 XML vulnerabilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1337
         21.4.2 The defusedxml Package . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1338
   21.5 xml.etree.ElementTree — The ElementTree XML API . . . . . . . . . . . . . . . . . . . . 1338
         21.5.1 Tutorial . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1338
         21.5.2 XPath support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1343
         21.5.3 Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1345
         21.5.4 XInclude support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1348
         21.5.5 Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1349
   21.6 xml.dom — The Document Object Model API . . . . . . . . . . . . . . . . . . . . . . . . . . . 1357
         21.6.1 Module Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1358
         21.6.2 Objects in the DOM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1359
         21.6.3 Conformance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1366
   21.7 xml.dom.minidom — Minimal DOM implementation . . . . . . . . . . . . . . . . . . . . . . . 1367
         21.7.1 DOM Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1369
         21.7.2 DOM Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1370
         21.7.3 minidom and the DOM standard . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1371
   21.8 xml.dom.pulldom — Support for building partial DOM trees . . . . . . . . . . . . . . . . . . . 1371
         21.8.1 DOMEventStream Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1373
   21.9 xml.sax — Support for SAX2 parsers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1373
         21.9.1 SAXException Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1375
   21.10 xml.sax.handler — Base classes for SAX handlers . . . . . . . . . . . . . . . . . . . . . . . 1375
         21.10.1 ContentHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1377
         21.10.2 DTDHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1379
         21.10.3 EntityResolver Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1379
         21.10.4 ErrorHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1379
         21.10.5 LexicalHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1380
   21.11 xml.sax.saxutils — SAX Utilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1380
   21.12 xml.sax.xmlreader — Interface for XML parsers . . . . . . . . . . . . . . . . . . . . . . . . 1381
         21.12.1 XMLReader Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1382
         21.12.2 IncrementalParser Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1383
         21.12.3 Locator Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1384
         21.12.4 InputSource Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1384
         21.12.5 The Attributes Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1385
         21.12.6 The AttributesNS Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1385
   21.13 xml.parsers.expat — Fast XML parsing using Expat . . . . . . . . . . . . . . . . . . . . . . 1385
         21.13.1 XMLParser Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1386
         21.13.2 ExpatError Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1391
         21.13.3 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1391
         21.13.4 Content Model Descriptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1392
         21.13.5 Expat error constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1392

22 Internet Protocols and Support                                                                           1397
   22.1 webbrowser — Convenient web-browser controller . . . . . . . . . . . . . . . . . . . . . . . . 1397
         22.1.1 Browser Controller Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1399
   22.2 wsgiref — WSGI Utilities and Reference Implementation . . . . . . . . . . . . . . . . . . . . . 1400
         22.2.1 wsgiref.util – WSGI environment utilities . . . . . . . . . . . . . . . . . . . . . . . 1400
         22.2.2 wsgiref.headers – WSGI response header tools . . . . . . . . . . . . . . . . . . . . 1402
         22.2.3 wsgiref.simple_server – a simple WSGI HTTP server . . . . . . . . . . . . . . . . 1403
         22.2.4 wsgiref.validate — WSGI conformance checker . . . . . . . . . . . . . . . . . . . 1404
         22.2.5 wsgiref.handlers – server/gateway base classes . . . . . . . . . . . . . . . . . . . . 1405


xii
      22.2.6 wsgiref.types – WSGI types for static type checking . . . . . . . . . . . . . . . . . . 1408
      22.2.7 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1409
22.3 urllib — URL handling modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1410
22.4 urllib.request — Extensible library for opening URLs . . . . . . . . . . . . . . . . . . . . . 1410
      22.4.1 Request Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1415
      22.4.2 OpenerDirector Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1417
      22.4.3 BaseHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1418
      22.4.4 HTTPRedirectHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1419
      22.4.5 HTTPCookieProcessor Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1420
      22.4.6 ProxyHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1420
      22.4.7 HTTPPasswordMgr Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1420
      22.4.8 HTTPPasswordMgrWithPriorAuth Objects . . . . . . . . . . . . . . . . . . . . . . . . . 1420
      22.4.9 AbstractBasicAuthHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1421
      22.4.10 HTTPBasicAuthHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1421
      22.4.11 ProxyBasicAuthHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1421
      22.4.12 AbstractDigestAuthHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1421
      22.4.13 HTTPDigestAuthHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1421
      22.4.14 ProxyDigestAuthHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1421
      22.4.15 HTTPHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1421
      22.4.16 HTTPSHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1421
      22.4.17 FileHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1421
      22.4.18 DataHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1422
      22.4.19 FTPHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1422
      22.4.20 CacheFTPHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1422
      22.4.21 UnknownHandler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1422
      22.4.22 HTTPErrorProcessor Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1422
      22.4.23 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1422
      22.4.24 Legacy interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1425
      22.4.25 urllib.request Restrictions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1427
22.5 urllib.response — Response classes used by urllib . . . . . . . . . . . . . . . . . . . . . . . 1428
22.6 urllib.parse — Parse URLs into components . . . . . . . . . . . . . . . . . . . . . . . . . . 1428
      22.6.1 URL Parsing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1429
      22.6.2 URL parsing security . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1433
      22.6.3 Parsing ASCII Encoded Bytes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1434
      22.6.4 Structured Parse Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1434
      22.6.5 URL Quoting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1435
22.7 urllib.error — Exception classes raised by urllib.request . . . . . . . . . . . . . . . . . . . . 1437
22.8 urllib.robotparser — Parser for robots.txt . . . . . . . . . . . . . . . . . . . . . . . . . . . 1438
22.9 http — HTTP modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1439
      22.9.1 HTTP status codes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1440
      22.9.2 HTTP status category . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1441
      22.9.3 HTTP methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1442
22.10 http.client — HTTP protocol client . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1442
      22.10.1 HTTPConnection Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1445
      22.10.2 HTTPResponse Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1447
      22.10.3 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1448
      22.10.4 HTTPMessage Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1450
22.11 ftplib — FTP protocol client . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1450
      22.11.1 Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1451
22.12 poplib — POP3 protocol client . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1457
      22.12.1 POP3 Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1458
      22.12.2 POP3 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1459
22.13 imaplib — IMAP4 protocol client . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1460
      22.13.1 IMAP4 Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1461
      22.13.2 IMAP4 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1466
22.14 smtplib — SMTP protocol client . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1466
      22.14.1 SMTP Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1468
      22.14.2 SMTP Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1472


                                                                                                            xiii
      22.15 uuid — UUID objects according to RFC 4122 . . . . . . . . . . . . . . . . . . . . . . . . . . . 1473
            22.15.1 Command-Line Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1476
            22.15.2 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1476
            22.15.3 Command-Line Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1477
      22.16 socketserver — A framework for network servers . . . . . . . . . . . . . . . . . . . . . . . . 1477
            22.16.1 Server Creation Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1478
            22.16.2 Server Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1479
            22.16.3 Request Handler Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1481
            22.16.4 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1482
      22.17 http.server — HTTP servers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1486
            22.17.1 Command-line interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1491
            22.17.2 Security considerations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1492
      22.18 http.cookies — HTTP state management . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1492
            22.18.1 Cookie Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1493
            22.18.2 Morsel Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1494
            22.18.3 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1495
      22.19 http.cookiejar — Cookie handling for HTTP clients . . . . . . . . . . . . . . . . . . . . . . 1496
            22.19.1 CookieJar and FileCookieJar Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1497
            22.19.2 FileCookieJar subclasses and co-operation with web browsers . . . . . . . . . . . . . . . 1499
            22.19.3 CookiePolicy Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1500
            22.19.4 DefaultCookiePolicy Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1501
            22.19.5 Cookie Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1502
            22.19.6 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1504
      22.20 xmlrpc — XMLRPC server and client modules . . . . . . . . . . . . . . . . . . . . . . . . . . . 1504
      22.21 xmlrpc.client — XML-RPC client access . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1504
            22.21.1 ServerProxy Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1506
            22.21.2 DateTime Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1507
            22.21.3 Binary Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1508
            22.21.4 Fault Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1508
            22.21.5 ProtocolError Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1509
            22.21.6 MultiCall Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1510
            22.21.7 Convenience Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1511
            22.21.8 Example of Client Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1511
            22.21.9 Example of Client and Server Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1512
      22.22 xmlrpc.server — Basic XML-RPC servers . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1512
            22.22.1 SimpleXMLRPCServer Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1513
            22.22.2 CGIXMLRPCRequestHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1516
            22.22.3 Documenting XMLRPC server . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1517
            22.22.4 DocXMLRPCServer Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1517
            22.22.5 DocCGIXMLRPCRequestHandler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1517
      22.23 ipaddress — IPv4/IPv6 manipulation library . . . . . . . . . . . . . . . . . . . . . . . . . . . 1518
            22.23.1 Convenience factory functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1518
            22.23.2 IP Addresses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1519
            22.23.3 IP Network definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1523
            22.23.4 Interface objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1529
            22.23.5 Other Module Level Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1530
            22.23.6 Custom Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1531

23 Multimedia Services                                                                                     1533
   23.1 wave — Read and write WAV files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1533
        23.1.1 Wave_read Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1533
        23.1.2 Wave_write Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1534
   23.2 colorsys — Conversions between color systems . . . . . . . . . . . . . . . . . . . . . . . . . . 1536

24 Internationalization                                                                                      1537
   24.1 gettext — Multilingual internationalization services . . . . . . . . . . . . . . . . . . . . . . . . 1537
         24.1.1 GNU gettext API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1537
         24.1.2 Class-based API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1538



xiv
        24.1.3 Internationalizing your programs and modules . . . . . . . . . . . . . . . . . . . . . . . 1542
        24.1.4 Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1544
   24.2 locale — Internationalization services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1545
        24.2.1 Background, details, hints, tips and caveats . . . . . . . . . . . . . . . . . . . . . . . . . 1552
        24.2.2 For extension writers and programs that embed Python . . . . . . . . . . . . . . . . . . . 1552
        24.2.3 Access to message catalogs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1552

25 Program Frameworks                                                                                         1553
   25.1 turtle — Turtle graphics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1553
        25.1.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1553
        25.1.2 Get started . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1553
        25.1.3 Tutorial . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1554
        25.1.4 How to… . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1555
        25.1.5 Turtle graphics reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1557
        25.1.6 Methods of RawTurtle/Turtle and corresponding functions . . . . . . . . . . . . . . . . . 1559
        25.1.7 Methods of TurtleScreen/Screen and corresponding functions . . . . . . . . . . . . . . . 1576
        25.1.8 Public classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1583
        25.1.9 Explanation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1584
        25.1.10 Help and configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1585
        25.1.11 turtledemo — Demo scripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1587
        25.1.12 Changes since Python 2.6 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1588
        25.1.13 Changes since Python 3.0 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1588
   25.2 cmd — Support for line-oriented command interpreters . . . . . . . . . . . . . . . . . . . . . . . 1589
        25.2.1 Cmd Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1589
        25.2.2 Cmd Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1591
   25.3 shlex — Simple lexical analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1594
        25.3.1 shlex Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1595
        25.3.2 Parsing Rules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1597
        25.3.3 Improved Compatibility with Shells . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1598

26 Graphical User Interfaces with Tk                                                                           1601
   26.1 tkinter — Python interface to Tcl/Tk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1601
        26.1.1 Architecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1602
        26.1.2 Tkinter Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1602
        26.1.3 Tkinter Life Preserver . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1604
        26.1.4 Threading model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1607
        26.1.5 Handy Reference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1608
        26.1.6 File Handlers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1613
   26.2 tkinter.colorchooser — Color choosing dialog . . . . . . . . . . . . . . . . . . . . . . . . 1614
   26.3 tkinter.font — Tkinter font wrapper . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1614
   26.4 Tkinter Dialogs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1615
        26.4.1 tkinter.simpledialog — Standard Tkinter input dialogs . . . . . . . . . . . . . . . 1615
        26.4.2 tkinter.filedialog — File selection dialogs . . . . . . . . . . . . . . . . . . . . . 1616
        26.4.3 tkinter.commondialog — Dialog window templates . . . . . . . . . . . . . . . . . . 1618
   26.5 tkinter.messagebox — Tkinter message prompts . . . . . . . . . . . . . . . . . . . . . . . . 1618
   26.6 tkinter.scrolledtext — Scrolled Text Widget . . . . . . . . . . . . . . . . . . . . . . . . 1620
   26.7 tkinter.dnd — Drag and drop support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1621
   26.8 tkinter.ttk — Tk themed widgets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1622
        26.8.1 Using Ttk . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1622
        26.8.2 Ttk Widgets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1622
        26.8.3 Widget . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1623
        26.8.4 Combobox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1625
        26.8.5 Spinbox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1626
        26.8.6 Notebook . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1627
        26.8.7 Progressbar . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1629
        26.8.8 Separator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1629
        26.8.9 Sizegrip . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1630
        26.8.10 Treeview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1630



                                                                                                                xv
           26.8.11 Ttk Styling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1635
      26.9 IDLE — Python editor and shell . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1640
           26.9.1 Menus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1640
           26.9.2 Editing and Navigation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1644
           26.9.3 Startup and Code Execution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1647
           26.9.4 Help and Preferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1650
           26.9.5 idlelib — implementation of IDLE application . . . . . . . . . . . . . . . . . . . . . . . 1651

27 Development Tools                                                                                           1653
   27.1 typing — Support for type hints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1653
         27.1.1 Specification for the Python Type System . . . . . . . . . . . . . . . . . . . . . . . . . . 1654
         27.1.2 Type aliases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1654
         27.1.3 NewType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1654
         27.1.4 Annotating callable objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1656
         27.1.5 Generics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1657
         27.1.6 Annotating tuples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1658
         27.1.7 The type of class objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1659
         27.1.8 Annotating generators and coroutines . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1659
         27.1.9 User-defined generic types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1660
         27.1.10 The Any type . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1663
         27.1.11 Nominal vs structural subtyping . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1664
         27.1.12 Module contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1665
         27.1.13 Deprecation Timeline of Major Features . . . . . . . . . . . . . . . . . . . . . . . . . . 1705
   27.2 pydoc — Documentation generator and online help system . . . . . . . . . . . . . . . . . . . . . 1705
   27.3 Python Development Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1706
         27.3.1 Effects of the Python Development Mode . . . . . . . . . . . . . . . . . . . . . . . . . . 1707
         27.3.2 ResourceWarning Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1708
         27.3.3 Bad file descriptor error example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1709
   27.4 doctest — Test interactive Python examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1709
         27.4.1 Simple Usage: Checking Examples in Docstrings . . . . . . . . . . . . . . . . . . . . . . 1711
         27.4.2 Simple Usage: Checking Examples in a Text File . . . . . . . . . . . . . . . . . . . . . . 1712
         27.4.3 Command-line Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1713
         27.4.4 How It Works . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1713
         27.4.5 Basic API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1720
         27.4.6 Unittest API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1722
         27.4.7 Advanced API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1724
         27.4.8 Debugging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1729
         27.4.9 Soapbox . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1732
   27.5 unittest — Unit testing framework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1733
         27.5.1 Basic example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1734
         27.5.2 Command-Line Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1735
         27.5.3 Test Discovery . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1736
         27.5.4 Organizing test code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1737
         27.5.5 Re-using old test code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1739
         27.5.6 Skipping tests and expected failures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1739
         27.5.7 Distinguishing test iterations using subtests . . . . . . . . . . . . . . . . . . . . . . . . . 1741
         27.5.8 Classes and functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1742
         27.5.9 Class and Module Fixtures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1761
         27.5.10 Signal Handling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1762
   27.6 unittest.mock — mock object library . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1763
         27.6.1 Quick Guide . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1763
         27.6.2 The Mock Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1765
         27.6.3 The patchers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1783
         27.6.4 MagicMock and magic method support . . . . . . . . . . . . . . . . . . . . . . . . . . . 1792
         27.6.5 Helpers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1795
         27.6.6 Order of precedence of side_effect, return_value and wraps . . . . . . . . . . . . 1803
   27.7 unittest.mock — getting started . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1805
         27.7.1 Using Mock . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1805


xvi
         27.7.2 Patch Decorators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1810
         27.7.3 Further Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1812
   27.8 test — Regression tests package for Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1824
         27.8.1 Writing Unit Tests for the test package . . . . . . . . . . . . . . . . . . . . . . . . . . 1825
         27.8.2 Running tests using the command-line interface . . . . . . . . . . . . . . . . . . . . . . 1826
   27.9 test.support — Utilities for the Python test suite . . . . . . . . . . . . . . . . . . . . . . . . 1827
   27.10 test.support.socket_helper — Utilities for socket tests . . . . . . . . . . . . . . . . . . . 1836
   27.11 test.support.script_helper — Utilities for the Python execution tests . . . . . . . . . . . 1837
   27.12 test.support.bytecode_helper — Support tools for testing correct bytecode generation . . 1838
   27.13 test.support.threading_helper — Utilities for threading tests . . . . . . . . . . . . . . . 1838
   27.14 test.support.os_helper — Utilities for os tests . . . . . . . . . . . . . . . . . . . . . . . . 1839
   27.15 test.support.import_helper — Utilities for import tests . . . . . . . . . . . . . . . . . . . 1841
   27.16 test.support.warnings_helper — Utilities for warnings tests . . . . . . . . . . . . . . . . 1842

28 Debugging and Profiling                                                                                      1845
   28.1 Audit events table . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1845
   28.2 bdb — Debugger framework . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1849
   28.3 faulthandler — Dump the Python traceback . . . . . . . . . . . . . . . . . . . . . . . . . . . 1854
        28.3.1 Dumping the traceback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1854
        28.3.2 Fault handler state . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1855
        28.3.3 Dumping the tracebacks after a timeout . . . . . . . . . . . . . . . . . . . . . . . . . . . 1855
        28.3.4 Dumping the traceback on a user signal . . . . . . . . . . . . . . . . . . . . . . . . . . . 1855
        28.3.5 Issue with file descriptors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1855
        28.3.6 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1856
   28.4 pdb — The Python Debugger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1856
        28.4.1 Debugger Commands . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1859
   28.5 The Python Profilers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1865
        28.5.1 Introduction to the profilers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1865
        28.5.2 Instant User’s Manual . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1865
        28.5.3 profile and cProfile Module Reference . . . . . . . . . . . . . . . . . . . . . . . . 1868
        28.5.4 The Stats Class . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1869
        28.5.5 What Is Deterministic Profiling? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1871
        28.5.6 Limitations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1872
        28.5.7 Calibration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1872
        28.5.8 Using a custom timer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1873
   28.6 timeit — Measure execution time of small code snippets . . . . . . . . . . . . . . . . . . . . . 1873
        28.6.1 Basic Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1873
        28.6.2 Python Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1874
        28.6.3 Command-Line Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1876
        28.6.4 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1876
   28.7 trace — Trace or track Python statement execution . . . . . . . . . . . . . . . . . . . . . . . . 1878
        28.7.1 Command-Line Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1878
        28.7.2 Programmatic Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1879
   28.8 tracemalloc — Trace memory allocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1881
        28.8.1 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1881
        28.8.2 API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1885

29 Software Packaging and Distribution                                                                      1891
   29.1 ensurepip — Bootstrapping the pip installer . . . . . . . . . . . . . . . . . . . . . . . . . . . 1891
        29.1.1 Command line interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1891
        29.1.2 Module API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1892
   29.2 venv — Creation of virtual environments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1893
        29.2.1 Creating virtual environments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1893
        29.2.2 How venvs work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1895
        29.2.3 API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1896
        29.2.4 An example of extending EnvBuilder . . . . . . . . . . . . . . . . . . . . . . . . . . . 1899
   29.3 zipapp — Manage executable Python zip archives . . . . . . . . . . . . . . . . . . . . . . . . . 1902
        29.3.1 Basic Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1903



                                                                                                               xvii
          29.3.2   Command-Line Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1903
          29.3.3   Python API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1903
          29.3.4   Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1904
          29.3.5   Specifying the Interpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1905
          29.3.6   Creating Standalone Applications with zipapp . . . . . . . . . . . . . . . . . . . . . . . 1905
          29.3.7   The Python Zip Application Archive Format . . . . . . . . . . . . . . . . . . . . . . . . 1906

30 Python Runtime Services                                                                                     1907
   30.1 sys — System-specific parameters and functions . . . . . . . . . . . . . . . . . . . . . . . . . . 1907
   30.2 sys.monitoring — Execution event monitoring . . . . . . . . . . . . . . . . . . . . . . . . . 1933
         30.2.1 Tool identifiers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1933
         30.2.2 Events . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1934
         30.2.3 Turning events on and off . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1936
         30.2.4 Registering callback functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1936
   30.3 sysconfig — Provide access to Python’s configuration information . . . . . . . . . . . . . . . . 1937
         30.3.1 Configuration variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1937
         30.3.2 Installation paths . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1938
         30.3.3 User scheme . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1939
         30.3.4 Home scheme . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1939
         30.3.5 Prefix scheme . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1940
         30.3.6 Installation path functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1941
         30.3.7 Other functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1942
         30.3.8 Using sysconfig as a script . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1943
   30.4 builtins — Built-in objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1943
   30.5 __main__ — Top-level code environment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1944
         30.5.1 __name__ == '__main__' . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1944
         30.5.2 __main__.py in Python Packages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1946
         30.5.3 import __main__ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1947
   30.6 warnings — Warning control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1949
         30.6.1 Warning Categories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1949
         30.6.2 The Warnings Filter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1950
         30.6.3 Temporarily Suppressing Warnings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1952
         30.6.4 Testing Warnings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1953
         30.6.5 Updating Code For New Versions of Dependencies . . . . . . . . . . . . . . . . . . . . 1953
         30.6.6 Available Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1953
         30.6.7 Available Context Managers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1955
   30.7 dataclasses — Data Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1956
         30.7.1 Module contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1957
         30.7.2 Post-init processing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1963
         30.7.3 Class variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1963
         30.7.4 Init-only variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1963
         30.7.5 Frozen instances . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1964
         30.7.6 Inheritance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1964
         30.7.7 Re-ordering of keyword-only parameters in __init__() . . . . . . . . . . . . . . . . . 1964
         30.7.8 Default factory functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1965
         30.7.9 Mutable default values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1965
         30.7.10 Descriptor-typed fields . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1966
   30.8 contextlib — Utilities for with-statement contexts . . . . . . . . . . . . . . . . . . . . . . . . 1967
         30.8.1 Utilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1967
         30.8.2 Examples and Recipes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1976
         30.8.3 Single use, reusable and reentrant context managers . . . . . . . . . . . . . . . . . . . . 1979
   30.9 abc — Abstract Base Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1981
   30.10 atexit — Exit handlers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1986
         30.10.1 atexit Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1987
   30.11 traceback — Print or retrieve a stack traceback . . . . . . . . . . . . . . . . . . . . . . . . . . 1988
         30.11.1 Module-Level Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1988
         30.11.2 TracebackException Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1991
         30.11.3 StackSummary Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1992


xviii
         30.11.4 FrameSummary Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1993
         30.11.5 Examples of Using the Module-Level Functions . . . . . . . . . . . . . . . . . . . . . . 1994
         30.11.6 Examples of Using TracebackException . . . . . . . . . . . . . . . . . . . . . . . . 1996
   30.12 __future__ — Future statement definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1998
         30.12.1 Module Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1998
   30.13 gc — Garbage Collector interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1999
   30.14 inspect — Inspect live objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2003
         30.14.1 Types and members . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2003
         30.14.2 Retrieving source code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2008
         30.14.3 Introspecting callables with the Signature object . . . . . . . . . . . . . . . . . . . . . . 2009
         30.14.4 Classes and functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2013
         30.14.5 The interpreter stack . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2016
         30.14.6 Fetching attributes statically . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2018
         30.14.7 Current State of Generators, Coroutines, and Asynchronous Generators . . . . . . . . . . 2019
         30.14.8 Code Objects Bit Flags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2020
         30.14.9 Buffer flags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2021
         30.14.10Command Line Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2022
   30.15 site — Site-specific configuration hook . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2022
         30.15.1 sitecustomize . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2023
         30.15.2 usercustomize . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2023
         30.15.3 Readline configuration . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2023
         30.15.4 Module contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2023
         30.15.5 Command Line Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2024

31 Custom Python Interpreters                                                                                 2027
   31.1 code — Interpreter base classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2027
        31.1.1 Interactive Interpreter Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2028
        31.1.2 Interactive Console Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2028
   31.2 codeop — Compile Python code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2029

32 Importing Modules                                                                                           2031
   32.1 zipimport — Import modules from Zip archives . . . . . . . . . . . . . . . . . . . . . . . . . . 2031
        32.1.1 zipimporter Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2032
        32.1.2 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2033
   32.2 pkgutil — Package extension utility . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2033
   32.3 modulefinder — Find modules used by a script . . . . . . . . . . . . . . . . . . . . . . . . . . 2036
        32.3.1 Example usage of ModuleFinder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2036
   32.4 runpy — Locating and executing Python modules . . . . . . . . . . . . . . . . . . . . . . . . . 2037
   32.5 importlib — The implementation of import . . . . . . . . . . . . . . . . . . . . . . . . . . . 2040
        32.5.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2040
        32.5.2 Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2041
        32.5.3 importlib.abc – Abstract base classes related to import . . . . . . . . . . . . . . . . . 2042
        32.5.4 importlib.machinery – Importers and path hooks . . . . . . . . . . . . . . . . . . . 2049
        32.5.5 importlib.util – Utility code for importers . . . . . . . . . . . . . . . . . . . . . . . 2054
        32.5.6 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2057
   32.6 importlib.resources – Package resource reading, opening and access . . . . . . . . . . . . . 2059
        32.6.1 Functional API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2061
   32.7 importlib.resources.abc – Abstract base classes for resources . . . . . . . . . . . . . . . . 2063
   32.8 importlib.metadata – Accessing package metadata . . . . . . . . . . . . . . . . . . . . . . . 2064
        32.8.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2065
        32.8.2 Functional API . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2066
        32.8.3 Distributions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2069
        32.8.4 Distribution Discovery . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2070
        32.8.5 Extending the search algorithm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2070
   32.9 The initialization of the sys.path module search path . . . . . . . . . . . . . . . . . . . . . . . 2072
        32.9.1 Virtual environments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2072
        32.9.2 _pth files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2073
        32.9.3 Embedded Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2073



                                                                                                                 xix
33 Python Language Services                                                                                    2075
   33.1 ast — Abstract Syntax Trees . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2075
         33.1.1 Abstract Grammar . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2075
         33.1.2 Node classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2078
         33.1.3 ast Helpers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2107
         33.1.4 Compiler Flags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2111
         33.1.5 Command-Line Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2112
   33.2 symtable — Access to the compiler’s symbol tables . . . . . . . . . . . . . . . . . . . . . . . . 2112
         33.2.1 Generating Symbol Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2112
         33.2.2 Examining Symbol Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2113
         33.2.3 Command-Line Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2116
   33.3 token — Constants used with Python parse trees . . . . . . . . . . . . . . . . . . . . . . . . . . 2116
   33.4 keyword — Testing for Python keywords . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2121
   33.5 tokenize — Tokenizer for Python source . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2121
         33.5.1 Tokenizing Input . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2121
         33.5.2 Command-Line Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2123
         33.5.3 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2123
   33.6 tabnanny — Detection of ambiguous indentation . . . . . . . . . . . . . . . . . . . . . . . . . . 2125
   33.7 pyclbr — Python module browser support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2126
         33.7.1 Function Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2126
         33.7.2 Class Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2127
   33.8 py_compile — Compile Python source files . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2128
         33.8.1 Command-Line Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2129
   33.9 compileall — Byte-compile Python libraries . . . . . . . . . . . . . . . . . . . . . . . . . . . 2129
         33.9.1 Command-line use . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2129
         33.9.2 Public functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2131
   33.10 dis — Disassembler for Python bytecode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2133
         33.10.1 Command-line interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2134
         33.10.2 Bytecode analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2134
         33.10.3 Analysis functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2135
         33.10.4 Python Bytecode Instructions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2138
         33.10.5 Opcode collections . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2154
   33.11 pickletools — Tools for pickle developers . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2155
         33.11.1 Command line usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2155
         33.11.2 Programmatic Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2156

34 MS Windows Specific Services                                                                             2157
   34.1 msvcrt — Useful routines from the MS VC++ runtime . . . . . . . . . . . . . . . . . . . . . . . 2157
        34.1.1 File Operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2157
        34.1.2 Console I/O . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2158
        34.1.3 Other Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2158
   34.2 winreg — Windows registry access . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2159
        34.2.1 Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2160
        34.2.2 Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2165
        34.2.3 Registry Handle Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2167
   34.3 winsound — Sound-playing interface for Windows . . . . . . . . . . . . . . . . . . . . . . . . . 2168

35 Unix Specific Services                                                                                    2171
   35.1 posix — The most common POSIX system calls . . . . . . . . . . . . . . . . . . . . . . . . . . 2171
         35.1.1 Large File Support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2171
         35.1.2 Notable Module Contents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2171
   35.2 pwd — The password database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2172
   35.3 grp — The group database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2173
   35.4 termios — POSIX style tty control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2173
         35.4.1 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2174
   35.5 tty — Terminal control functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2175
   35.6 pty — Pseudo-terminal utilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2176
         35.6.1 Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2177



xx
   35.7 fcntl — The fcntl and ioctl system calls . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2177
   35.8 resource — Resource usage information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2180
        35.8.1 Resource Limits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2180
        35.8.2 Resource Usage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2183
   35.9 syslog — Unix syslog library routines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2184
        35.9.1 Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2186

36 Modules command-line interface (CLI)                                                                      2189

37 Superseded Modules                                                                                     2191
   37.1 getopt — C-style parser for command line options . . . . . . . . . . . . . . . . . . . . . . . . . 2191

38 Removed Modules                                                                                             2195
   38.1 aifc — Read and write AIFF and AIFC files . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2195
   38.2 asynchat — Asynchronous socket command/response handler . . . . . . . . . . . . . . . . . . 2195
   38.3 asyncore — Asynchronous socket handler . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2195
   38.4 audioop — Manipulate raw audio data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2195
   38.5 cgi — Common Gateway Interface support . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2196
   38.6 cgitb — Traceback manager for CGI scripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2196
   38.7 chunk — Read IFF chunked data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2196
   38.8 crypt — Function to check Unix passwords . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2196
   38.9 distutils — Building and installing Python modules . . . . . . . . . . . . . . . . . . . . . . . 2196
   38.10 imghdr — Determine the type of an image . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2196
   38.11 imp — Access the import internals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2197
   38.12 mailcap — Mailcap file handling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2197
   38.13 msilib — Read and write Microsoft Installer files . . . . . . . . . . . . . . . . . . . . . . . . . 2197
   38.14 nis — Interface to Sun’s NIS (Yellow Pages) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2197
   38.15 nntplib — NNTP protocol client . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2197
   38.16 ossaudiodev — Access to OSS-compatible audio devices . . . . . . . . . . . . . . . . . . . . . 2197
   38.17 pipes — Interface to shell pipelines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2198
   38.18 smtpd — SMTP Server . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2198
   38.19 sndhdr — Determine type of sound file . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2198
   38.20 spwd — The shadow password database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2198
   38.21 sunau — Read and write Sun AU files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2198
   38.22 telnetlib — Telnet client . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2198
   38.23 uu — Encode and decode uuencode files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2199
   38.24 xdrlib — Encode and decode XDR data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2199

39 Security Considerations                                                                                   2201

A Glossary                                                                                                   2203

B About this documentation                                                                                2221
  B.1 Contributors to the Python documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2221

C History and License                                                                                        2223
  C.1 History of the software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2223
  C.2 Terms and conditions for accessing or otherwise using Python . . . . . . . . . . . . . . . . . . . . 2224
        C.2.1 PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2 . . . . . . . . . . . . . 2224
        C.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0 . . . . . . . . . . . . . . 2225
        C.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1 . . . . . . . . . . . . . . . . . . 2225
        C.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2 . . . . . . . . . . 2226
        C.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION . 2227
  C.3 Licenses and Acknowledgements for Incorporated Software . . . . . . . . . . . . . . . . . . . . . 2227
        C.3.1 Mersenne Twister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2227
        C.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2228
        C.3.3 Asynchronous socket services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2229
        C.3.4 Cookie management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2229
        C.3.5 Execution tracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2229


                                                                                                               xxi
        C.3.6    UUencode and UUdecode functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2230
        C.3.7    XML Remote Procedure Calls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2231
        C.3.8    test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2231
        C.3.9    Select kqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2232
        C.3.10   SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2232
        C.3.11   strtod and dtoa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2233
        C.3.12   OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2233
        C.3.13   expat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2236
        C.3.14   libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2237
        C.3.15   zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2237
        C.3.16   cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2238
        C.3.17   libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2238
        C.3.18   W3C C14N test suite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2239
        C.3.19   mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2240
        C.3.20   asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2240
        C.3.21   Global Unbounded Sequences (GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2240

D Copyright                                                                                                    2243

Bibliography                                                                                                   2245

Python Module Index                                                                                            2247

Index                                                                                                          2251




xxii
                                                                The Python Library Reference, Release 3.13.3


While reference-index describes the exact syntax and semantics of the Python language, this library reference manual
describes the standard library that is distributed with Python. It also describes some of the optional components that
are commonly included in Python distributions.
Python’s standard library is very extensive, offering a wide range of facilities as indicated by the long table of contents
listed below. The library contains built-in modules (written in C) that provide access to system functionality such as
file I/O that would otherwise be inaccessible to Python programmers, as well as modules written in Python that provide
standardized solutions for many problems that occur in everyday programming. Some of these modules are explicitly
designed to encourage and enhance the portability of Python programs by abstracting away platform-specifics into
platform-neutral APIs.
The Python installers for the Windows platform usually include the entire standard library and often also include many
additional components. For Unix-like operating systems Python is normally provided as a collection of packages,
so it may be necessary to use the packaging tools provided with the operating system to obtain some or all of the
optional components.
In addition to the standard library, there is an active collection of hundreds of thousands of components (from in-
dividual programs and modules to packages and entire application development frameworks), available from the
Python Package Index.




CONTENTS                                                                                                                 1
The Python Library Reference, Release 3.13.3




2                                              CONTENTS

====================================
End of library_toc.txt
====================================

====================================
 File: python_tocs.txt
====================================


====================================
End of python_tocs.txt
====================================

====================================
 File: reference_toc.txt
====================================

     The Python Language Reference
                                     Release 3.13.3




Guido van Rossum and the Python development team




                                           April 27, 2025




                              Python Software Foundation
                                  Email: docs@python.org
                                                                                               CONTENTS




1 Introduction                                                                                                   3
  1.1 Alternate Implementations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      3
  1.2 Notation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     4

2 Lexical analysis                                                                                                5
  2.1 Line structure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    5
        2.1.1 Logical lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     5
        2.1.2 Physical lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      5
        2.1.3 Comments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        5
        2.1.4 Encoding declarations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       5
        2.1.5 Explicit line joining . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     6
        2.1.6 Implicit line joining . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     6
        2.1.7 Blank lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     6
        2.1.8 Indentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       6
        2.1.9 Whitespace between tokens . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         7
  2.2 Other tokens . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      7
  2.3 Identifiers and keywords . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      8
        2.3.1 Keywords . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        8
        2.3.2 Soft Keywords . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       9
        2.3.3 Reserved classes of identifiers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     9
  2.4 Literals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    9
        2.4.1 String and Bytes literals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     9
        2.4.2 String literal concatenation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     12
        2.4.3 f-strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    12
        2.4.4 Numeric literals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     14
        2.4.5 Integer literals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   14
        2.4.6 Floating-point literals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    15
        2.4.7 Imaginary literals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     15
  2.5 Operators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    15
  2.6 Delimiters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     15

3 Data model                                                                                                     17
  3.1 Objects, values and types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    17
  3.2 The standard type hierarchy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      18
       3.2.1 None . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      18
       3.2.2 NotImplemented . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          18
       3.2.3 Ellipsis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    18
       3.2.4 numbers.Number . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            18
       3.2.5 Sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       19
       3.2.6 Set types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     20
       3.2.7 Mappings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        21
       3.2.8 Callable types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      21
       3.2.9 Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       24
       3.2.10 Custom classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       27


                                                                                                                  i
           3.2.11 Class instances . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   29
           3.2.12 I/O objects (also known as file objects) . . . . . . . . . . . . . . . . . . . . . . . . . . .    29
           3.2.13 Internal types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    29
     3.3   Special method names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     34
           3.3.1 Basic customization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      35
           3.3.2 Customizing attribute access . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       38
           3.3.3 Customizing class creation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       42
           3.3.4 Customizing instance and subclass checks . . . . . . . . . . . . . . . . . . . . . . . . .         46
           3.3.5 Emulating generic types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      46
           3.3.6 Emulating callable objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     48
           3.3.7 Emulating container types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      48
           3.3.8 Emulating numeric types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        50
           3.3.9 With Statement Context Managers . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          52
           3.3.10 Customizing positional arguments in class pattern matching . . . . . . . . . . . . . . . .        53
           3.3.11 Emulating buffer types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      53
           3.3.12 Special method lookup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       53
     3.4   Coroutines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   55
           3.4.1 Awaitable Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      55
           3.4.2 Coroutine Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      55
           3.4.3 Asynchronous Iterators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       56
           3.4.4 Asynchronous Context Managers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          56

4 Execution model                                                                                                   59
  4.1 Structure of a program . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        59
  4.2 Naming and binding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          59
       4.2.1 Binding of names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           59
       4.2.2 Resolution of names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          60
       4.2.3 Annotation scopes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          61
       4.2.4 Lazy evaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          61
       4.2.5 Builtins and restricted execution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        62
       4.2.6 Interaction with dynamic features . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          62
  4.3 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        62

5 The import system                                                                                                 65
  5.1 importlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         65
  5.2 Packages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        65
        5.2.1 Regular packages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          66
        5.2.2 Namespace packages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            66
  5.3 Searching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       66
        5.3.1 The module cache . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          67
        5.3.2 Finders and loaders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         67
        5.3.3 Import hooks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          67
        5.3.4 The meta path . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         67
  5.4 Loading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       68
        5.4.1 Loaders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         69
        5.4.2 Submodules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          70
        5.4.3 Module specs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          70
        5.4.4 __path__ attributes on modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          71
        5.4.5 Module reprs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          71
        5.4.6 Cached bytecode invalidation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          71
  5.5 The Path Based Finder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         72
        5.5.1 Path entry finders . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        72
        5.5.2 Path entry finder protocol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        73
  5.6 Replacing the standard import system . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          73
  5.7 Package Relative Imports . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        74
  5.8 Special considerations for __main__ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         74
        5.8.1 __main__.__spec__ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           74
  5.9 References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        75



ii
6 Expressions                                                                                                     77
  6.1 Arithmetic conversions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      77
  6.2 Atoms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     77
       6.2.1 Identifiers (Names) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        77
       6.2.2 Literals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       78
       6.2.3 Parenthesized forms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        78
       6.2.4 Displays for lists, sets and dictionaries . . . . . . . . . . . . . . . . . . . . . . . . . . . .    79
       6.2.5 List displays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      79
       6.2.6 Set displays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       79
       6.2.7 Dictionary displays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        80
       6.2.8 Generator expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        80
       6.2.9 Yield expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        81
  6.3 Primaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     85
       6.3.1 Attribute references . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       85
       6.3.2 Subscriptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        85
       6.3.3 Slicings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       86
       6.3.4 Calls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      86
  6.4 Await expression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      88
  6.5 The power operator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      88
  6.6 Unary arithmetic and bitwise operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       88
  6.7 Binary arithmetic operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      89
  6.8 Shifting operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     90
  6.9 Binary bitwise operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     90
  6.10 Comparisons . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      90
       6.10.1 Value comparisons . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         90
       6.10.2 Membership test operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        92
       6.10.3 Identity comparisons . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        93
  6.11 Boolean operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     93
  6.12 Assignment expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     93
  6.13 Conditional expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    94
  6.14 Lambdas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      94
  6.15 Expression lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   94
  6.16 Evaluation order . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     95
  6.17 Operator precedence . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      95

7 Simple statements                                                                                          97
  7.1 Expression statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
  7.2 Assignment statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97
       7.2.1 Augmented assignment statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99
       7.2.2 Annotated assignment statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
  7.3 The assert statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 100
  7.4 The pass statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
  7.5 The del statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
  7.6 The return statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
  7.7 The yield statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
  7.8 The raise statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102
  7.9 The break statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
  7.10 The continue statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
  7.11 The import statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 104
       7.11.1 Future statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
  7.12 The global statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 106
  7.13 The nonlocal statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
  7.14 The type statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107

8 Compound statements                                                                                        109
  8.1 The if statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
  8.2 The while statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
  8.3 The for statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110



                                                                                                                  iii
     8.4  The try statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
          8.4.1 except clause . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
          8.4.2 except* clause . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112
          8.4.3 else clause . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
          8.4.4 finally clause . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
     8.5 The with statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
     8.6 The match statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
          8.6.1 Overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
          8.6.2 Guards . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
          8.6.3 Irrefutable Case Blocks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
          8.6.4 Patterns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
     8.7 Function definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
     8.8 Class definitions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125
     8.9 Coroutines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126
          8.9.1 Coroutine function definition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126
          8.9.2 The async for statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
          8.9.3 The async with statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127
     8.10 Type parameter lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 128
          8.10.1 Generic functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129
          8.10.2 Generic classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130
          8.10.3 Generic type aliases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 131

9 Top-level components                                                                                         133
  9.1 Complete Python programs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
  9.2 File input . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
  9.3 Interactive input . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 133
  9.4 Expression input . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 134

10 Full Grammar specification                                                                                    135

A Glossary                                                                                                       153

B About this documentation                                                                                 171
  B.1 Contributors to the Python documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 171

C History and License                                                                                           173
  C.1 History of the software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 173
  C.2 Terms and conditions for accessing or otherwise using Python . . . . . . . . . . . . . . . . . . . . 174
        C.2.1 PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2 . . . . . . . . . . . . . 174
        C.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0 . . . . . . . . . . . . . . 175
        C.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1 . . . . . . . . . . . . . . . . . . 175
        C.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2 . . . . . . . . . . 176
        C.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION . 177
  C.3 Licenses and Acknowledgements for Incorporated Software . . . . . . . . . . . . . . . . . . . . . 177
        C.3.1 Mersenne Twister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 177
        C.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 178
        C.3.3 Asynchronous socket services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
        C.3.4 Cookie management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
        C.3.5 Execution tracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 179
        C.3.6 UUencode and UUdecode functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 180
        C.3.7 XML Remote Procedure Calls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
        C.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 181
        C.3.9 Select kqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
        C.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 182
        C.3.11 strtod and dtoa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
        C.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 183
        C.3.13 expat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 186
        C.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187
        C.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 187


iv
        C.3.16   cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
        C.3.17   libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 188
        C.3.18   W3C C14N test suite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 189
        C.3.19   mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190
        C.3.20   asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190
        C.3.21   Global Unbounded Sequences (GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 190

D Copyright                                                                                                   193

Index                                                                                                         195




                                                                                                                v
vi
                                                         The Python Language Reference, Release 3.13.3


This reference manual describes the syntax and “core semantics” of the language. It is terse, but attempts to be
exact and complete. The semantics of non-essential built-in object types and of the built-in functions and modules
are described in library-index. For an informal introduction to the language, see tutorial-index. For C or C++
programmers, two additional manuals exist: extending-index describes the high-level picture of how to write a Python
extension module, and the c-api-index describes the interfaces available to C/C++ programmers in detail.




CONTENTS                                                                                                          1
The Python Language Reference, Release 3.13.3




2                                               CONTENTS

====================================
End of reference_toc.txt
====================================

====================================
 File: tutorial_toc.txt
====================================

                            Python Tutorial
                                     Release 3.13.3




Guido van Rossum and the Python development team




                                           April 27, 2025




                              Python Software Foundation
                                  Email: docs@python.org
                                                                                               CONTENTS




1 Whetting Your Appetite                                                                                         3

2 Using the Python Interpreter                                                                                   5
  2.1 Invoking the Interpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   5
        2.1.1 Argument Passing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       6
        2.1.2 Interactive Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       6
  2.2 The Interpreter and Its Environment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      6
        2.2.1 Source Code Encoding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         6

3 An Informal Introduction to Python                                                                              7
  3.1 Using Python as a Calculator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      7
       3.1.1 Numbers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        7
       3.1.2 Text . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       9
       3.1.3 Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     12
  3.2 First Steps Towards Programming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        14

4 More Control Flow Tools                                                                                        17
  4.1 if Statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    17
  4.2 for Statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     17
  4.3 The range() Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       18
  4.4 break and continue Statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          19
  4.5 else Clauses on Loops . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      19
  4.6 pass Statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      20
  4.7 match Statements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       21
  4.8 Defining Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     23
  4.9 More on Defining Functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       25
       4.9.1 Default Argument Values . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         25
       4.9.2 Keyword Arguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           26
       4.9.3 Special parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        27
       4.9.4 Arbitrary Argument Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        30
       4.9.5 Unpacking Argument Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          30
       4.9.6 Lambda Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          30
       4.9.7 Documentation Strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         31
       4.9.8 Function Annotations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        31
  4.10 Intermezzo: Coding Style . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    32

5 Data Structures                                                                                                33
  5.1 More on Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    33
        5.1.1 Using Lists as Stacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      34
        5.1.2 Using Lists as Queues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      35
        5.1.3 List Comprehensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        35
        5.1.4 Nested List Comprehensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         36
  5.2 The del statement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      37
  5.3 Tuples and Sequences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     38
  5.4 Sets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   39


                                                                                                                  i
     5.5   Dictionaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   39
     5.6   Looping Techniques . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       40
     5.7   More on Conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     42
     5.8   Comparing Sequences and Other Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          42

6 Modules                                                                                                             43
  6.1 More on Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           44
      6.1.1 Executing modules as scripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .              45
      6.1.2 The Module Search Path . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .                45
      6.1.3 “Compiled” Python files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .             46
  6.2 Standard Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          46
  6.3 The dir() Function . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            47
  6.4 Packages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          48
      6.4.1 Importing * From a Package . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .                49
      6.4.2 Intra-package References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .              50
      6.4.3 Packages in Multiple Directories . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .              51

7 Input and Output                                                                                                    53
  7.1 Fancier Output Formatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           53
        7.1.1 Formatted String Literals . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           54
        7.1.2 The String format() Method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            55
        7.1.3 Manual String Formatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            56
        7.1.4 Old string formatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           57
  7.2 Reading and Writing Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           57
        7.2.1 Methods of File Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           58
        7.2.2 Saving structured data with json . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            59

8 Errors and Exceptions                                                                                               61
  8.1 Syntax Errors . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         61
  8.2 Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          61
  8.3 Handling Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           62
  8.4 Raising Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          64
  8.5 Exception Chaining . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          65
  8.6 User-defined Exceptions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           66
  8.7 Defining Clean-up Actions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           66
  8.8 Predefined Clean-up Actions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           68
  8.9 Raising and Handling Multiple Unrelated Exceptions . . . . . . . . . . . . . . . . . . . . . . . .              68
  8.10 Enriching Exceptions with Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          70

9 Classes                                                                                                             73
  9.1 A Word About Names and Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .              73
  9.2 Python Scopes and Namespaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .              73
        9.2.1 Scopes and Namespaces Example . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .               75
  9.3 A First Look at Classes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         75
        9.3.1 Class Definition Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           75
        9.3.2 Class Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           76
        9.3.3 Instance Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          77
        9.3.4 Method Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            77
        9.3.5 Class and Instance Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            78
  9.4 Random Remarks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            79
  9.5 Inheritance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         80
        9.5.1 Multiple Inheritance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          81
  9.6 Private Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         81
  9.7 Odds and Ends . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           82
  9.8 Iterators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       83
  9.9 Generators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          84
  9.10 Generator Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          84

10 Brief Tour of the Standard Library                                                                                 87


ii
   10.1 Operating System Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      87
   10.2 File Wildcards . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      87
   10.3 Command Line Arguments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          87
   10.4 Error Output Redirection and Program Termination . . . . . . . . . . . . . . . . . . . . . . . . .          88
   10.5 String Pattern Matching . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       88
   10.6 Mathematics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       88
   10.7 Internet Access . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     89
   10.8 Dates and Times . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       90
   10.9 Data Compression . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        90
   10.10 Performance Measurement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        90
   10.11 Quality Control . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    91
   10.12 Batteries Included . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   91

11 Brief Tour of the Standard Library — Part II                                                                     93
   11.1 Output Formatting . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       93
   11.2 Templating . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      94
   11.3 Working with Binary Data Record Layouts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         95
   11.4 Multi-threading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     95
   11.5 Logging . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     96
   11.6 Weak References . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       96
   11.7 Tools for Working with Lists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      97
   11.8 Decimal Floating-Point Arithmetic . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       98

12 Virtual Environments and Packages                                                                             101
   12.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
   12.2 Creating Virtual Environments . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 101
   12.3 Managing Packages with pip . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 102

13 What Now?                                                                                                        105

14 Interactive Input Editing and History Substitution                                                             107
   14.1 Tab Completion and History Editing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107
   14.2 Alternatives to the Interactive Interpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 107

15 Floating-Point Arithmetic: Issues and Limitations                                                           109
   15.1 Representation Error . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112

16 Appendix                                                                                                    115
   16.1 Interactive Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
        16.1.1 Error Handling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
        16.1.2 Executable Python Scripts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
        16.1.3 The Interactive Startup File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116
        16.1.4 The Customization Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116

A Glossary                                                                                                          117

B About this documentation                                                                                 135
  B.1 Contributors to the Python documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 135

C History and License                                                                                         137
  C.1 History of the software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 137
  C.2 Terms and conditions for accessing or otherwise using Python . . . . . . . . . . . . . . . . . . . . 138
        C.2.1 PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2 . . . . . . . . . . . . . 138
        C.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0 . . . . . . . . . . . . . . 139
        C.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1 . . . . . . . . . . . . . . . . . . 139
        C.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2 . . . . . . . . . . 140
        C.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION . 141
  C.3 Licenses and Acknowledgements for Incorporated Software . . . . . . . . . . . . . . . . . . . . . 141
        C.3.1 Mersenne Twister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141
        C.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 142


                                                                                                                     iii
        C.3.3    Asynchronous socket services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
        C.3.4    Cookie management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
        C.3.5    Execution tracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 143
        C.3.6    UUencode and UUdecode functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 144
        C.3.7    XML Remote Procedure Calls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
        C.3.8    test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 145
        C.3.9    Select kqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
        C.3.10   SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 146
        C.3.11   strtod and dtoa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147
        C.3.12   OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 147
        C.3.13   expat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 150
        C.3.14   libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151
        C.3.15   zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 151
        C.3.16   cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152
        C.3.17   libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 152
        C.3.18   W3C C14N test suite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 153
        C.3.19   mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
        C.3.20   asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
        C.3.21   Global Unbounded Sequences (GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154

D Copyright                                                                                                      157

Index                                                                                                            159




iv
                                                                                Python Tutorial, Release 3.13.3


Python is an easy to learn, powerful programming language. It has efficient high-level data structures and a simple
but effective approach to object-oriented programming. Python’s elegant syntax and dynamic typing, together with
its interpreted nature, make it an ideal language for scripting and rapid application development in many areas on
most platforms.
The Python interpreter and the extensive standard library are freely available in source or binary form for all major
platforms from the Python web site, https://www.python.org/, and may be freely distributed. The same site also
contains distributions of and pointers to many free third party Python modules, programs and tools, and additional
documentation.
The Python interpreter is easily extended with new functions and data types implemented in C or C++ (or other
languages callable from C). Python is also suitable as an extension language for customizable applications.
This tutorial introduces the reader informally to the basic concepts and features of the Python language and system. It
helps to have a Python interpreter handy for hands-on experience, but all examples are self-contained, so the tutorial
can be read off-line as well.
For a description of standard objects and modules, see library-index. reference-index gives a more formal definition
of the language. To write extensions in C or C++, read extending-index and c-api-index. There are also several books
covering Python in depth.
This tutorial does not attempt to be comprehensive and cover every single feature, or even every commonly used
feature. Instead, it introduces many of Python’s most noteworthy features, and will give you a good idea of the
language’s flavor and style. After reading it, you will be able to read and write Python modules and programs, and
you will be ready to learn more about the various Python library modules described in library-index.
The Glossary is also worth going through.




CONTENTS                                                                                                             1
Python Tutorial, Release 3.13.3




2                                 CONTENTS

====================================
End of tutorial_toc.txt
====================================

====================================
 File: using_toc.txt
====================================

               Python Setup and Usage
                                     Release 3.13.3




Guido van Rossum and the Python development team




                                           April 27, 2025




                              Python Software Foundation
                                  Email: docs@python.org
                                                                                               CONTENTS




1 Command line and environment                                                                                    3
  1.1 Command line . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        3
      1.1.1 Interface options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       3
      1.1.2 Generic options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         5
      1.1.3 Miscellaneous options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         6
      1.1.4 Controlling color . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        10
      1.1.5 Options you shouldn’t use . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        10
  1.2 Environment variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      10
      1.2.1 Debug-mode variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         16

2 Using Python on Unix platforms                                                                                 19
  2.1 Getting and installing the latest version of Python . . . . . . . . . . . . . . . . . . . . . . . . . .    19
        2.1.1 On Linux . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       19
        2.1.2 On FreeBSD and OpenBSD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           20
  2.2 Building Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      20
  2.3 Python-related paths and files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   20
  2.4 Miscellaneous . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    21
  2.5 Custom OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       21

3 Configure Python                                                                                               23
  3.1 Build Requirements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     23
  3.2 Generated files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    23
        3.2.1 configure script . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     24
  3.3 Configure Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      24
        3.3.1 General Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      24
        3.3.2 C compiler options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       27
        3.3.3 Linker options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     27
        3.3.4 Options for third-party dependencies . . . . . . . . . . . . . . . . . . . . . . . . . . . .       27
        3.3.5 WebAssembly Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          29
        3.3.6 Install Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    29
        3.3.7 Performance options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      30
        3.3.8 Python Debug Build . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       31
        3.3.9 Debug options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      32
        3.3.10 Linker options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    33
        3.3.11 Libraries options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     33
        3.3.12 Security Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    34
        3.3.13 macOS Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       35
        3.3.14 iOS Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     35
        3.3.15 Cross Compiling Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       36
  3.4 Python Build System . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      36
        3.4.1 Main files of the build system . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     36
        3.4.2 Main build steps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     36
        3.4.3 Main Makefile targets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      37
        3.4.4 C extensions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     38


                                                                                                                  i
     3.5   Compiler and linker flags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   38
           3.5.1 Preprocessor flags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      38
           3.5.2 Compiler flags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      39
           3.5.3 Linker flags . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      40

4 Using Python on Windows                                                                                            43
  4.1 The full installer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       43
        4.1.1 Installation steps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       43
        4.1.2 Removing the MAX_PATH Limitation . . . . . . . . . . . . . . . . . . . . . . . . . . .                 44
        4.1.3 Installing Without UI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          45
        4.1.4 Installing Without Downloading . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           47
        4.1.5 Modifying an install . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         47
        4.1.6 Installing Free-threaded Binaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          48
  4.2 The Microsoft Store package . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          48
        4.2.1 Known issues . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           49
  4.3 The nuget.org packages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         50
        4.3.1 Free-threaded packages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           50
  4.4 The embeddable package . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           51
        4.4.1 Python Application . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           51
        4.4.2 Embedding Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .             51
  4.5 Alternative bundles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        52
  4.6 Configuring Python . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         52
        4.6.1 Excursus: Setting environment variables . . . . . . . . . . . . . . . . . . . . . . . . . .            52
        4.6.2 Finding the Python executable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            53
  4.7 UTF-8 mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           53
  4.8 Python Launcher for Windows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            54
        4.8.1 Getting started . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        54
        4.8.2 Shebang Lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          55
        4.8.3 Arguments in shebang lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           56
        4.8.4 Customization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          57
        4.8.5 Diagnostics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          58
        4.8.6 Dry Run . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          58
        4.8.7 Install on demand . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          58
        4.8.8 Return codes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           58
  4.9 Finding modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          58
  4.10 Additional modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        60
        4.10.1 PyWin32 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           60
        4.10.2 cx_Freeze . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         60
  4.11 Compiling Python on Windows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           60
  4.12 Other Platforms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       60

5 Using Python on macOS                                                                                              61
  5.1 Using Python for macOS from python.org . . . . . . . . . . . . . . . . . . . . . . . . . . . .                 61
        5.1.1 Installation steps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       61
        5.1.2 How to run a Python script . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           69
  5.2 Alternative Distributions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        69
  5.3 Installing Additional Python Packages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          69
  5.4 GUI Programming . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            69
  5.5 Advanced Topics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          70
        5.5.1 Installing Free-threaded Binaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          70
        5.5.2 Installing using the command line . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          72
        5.5.3 Distributing Python Applications . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .           73
        5.5.4 App Store Compliance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .             73
  5.6 Other Resources . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          74

6 Using Python on Android                                                                                            75
  6.1 Adding Python to an Android app . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .            75

7 Using Python on iOS                                                                                                77


ii
   7.1    Python at runtime on iOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   77
          7.1.1 iOS version compatibility . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      77
          7.1.2 Platform identification . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    77
          7.1.3 Standard library availability . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    77
          7.1.4 Binary extension modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       78
          7.1.5 Compiler stub binaries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       78
   7.2    Installing Python on iOS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   78
          7.2.1 Tools for building iOS apps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .      78
          7.2.2 Adding Python to an iOS project . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        79
          7.2.3 Testing a Python package . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       81
   7.3    App Store Compliance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     82

8 Editors and IDEs                                                                                                 83
  8.1 IDLE — Python editor and shell . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .         83
  8.2 Other Editors and IDEs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       83

A Glossary                                                                                                         85

B About this documentation                                                                                 103
  B.1 Contributors to the Python documentation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 103

C History and License                                                                                           105
  C.1 History of the software . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 105
  C.2 Terms and conditions for accessing or otherwise using Python . . . . . . . . . . . . . . . . . . . . 106
        C.2.1 PYTHON SOFTWARE FOUNDATION LICENSE VERSION 2 . . . . . . . . . . . . . 106
        C.2.2 BEOPEN.COM LICENSE AGREEMENT FOR PYTHON 2.0 . . . . . . . . . . . . . . 107
        C.2.3 CNRI LICENSE AGREEMENT FOR PYTHON 1.6.1 . . . . . . . . . . . . . . . . . . 107
        C.2.4 CWI LICENSE AGREEMENT FOR PYTHON 0.9.0 THROUGH 1.2 . . . . . . . . . . 108
        C.2.5 ZERO-CLAUSE BSD LICENSE FOR CODE IN THE PYTHON DOCUMENTATION . 109
  C.3 Licenses and Acknowledgements for Incorporated Software . . . . . . . . . . . . . . . . . . . . . 109
        C.3.1 Mersenne Twister . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 109
        C.3.2 Sockets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 110
        C.3.3 Asynchronous socket services . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
        C.3.4 Cookie management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
        C.3.5 Execution tracing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 111
        C.3.6 UUencode and UUdecode functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . 112
        C.3.7 XML Remote Procedure Calls . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
        C.3.8 test_epoll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 113
        C.3.9 Select kqueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
        C.3.10 SipHash24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 114
        C.3.11 strtod and dtoa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
        C.3.12 OpenSSL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 115
        C.3.13 expat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 118
        C.3.14 libffi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119
        C.3.15 zlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119
        C.3.16 cfuhash . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120
        C.3.17 libmpdec . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 120
        C.3.18 W3C C14N test suite . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
        C.3.19 mimalloc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
        C.3.20 asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122
        C.3.21 Global Unbounded Sequences (GUS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122

D Copyright                                                                                                        125

Index                                                                                                              127




                                                                                                                    iii
iv
                                                                   Python Setup and Usage, Release 3.13.3


This part of the documentation is devoted to general information on the setup of the Python environment on different
platforms, the invocation of the interpreter and things that make working with Python easier.




CONTENTS                                                                                                          1
Python Setup and Usage, Release 3.13.3




2                                        CONTENTS

====================================
End of using_toc.txt
====================================

====================================
 File: whatsnew_toc.txt
====================================

                                                  What’s New in Python
                                                                                                Release 3.13.3


                                                                                            A. M. Kuchling


                                                                                                    April 27, 2025
                                                                                  Python Software Foundation
                                                                                      Email: docs@python.org


Contents

1 Summary – Release Highlights                                                                                     3

2 New Features                                                                                                     5
  2.1 A better interactive interpreter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     5
  2.2 Improved error messages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        5
  2.3 Free-threaded CPython . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        6
  2.4 An experimental just-in-time (JIT) compiler . . . . . . . . . . . . . . . . . . . . . . . . . . . . .        7
  2.5 Defined mutation semantics for locals() . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .          8
  2.6 Support for mobile platforms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .       8

3 Other Language Changes                                                                                           8

4 New Modules                                                                                                      10

5 Improved Modules                                                                                                 10
  5.1 argparse . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     10
  5.2 array . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    10
  5.3 ast . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    10
  5.4 asyncio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    10
  5.5 base64 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     11
  5.6 compileall . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     11
  5.7 concurrent.futures . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     11
  5.8 configparser . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     11
  5.9 copy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     11
  5.10 ctypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    12
  5.11 dbm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     12
  5.12 dis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   12
  5.13 doctest . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   12
  5.14 email . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   12
  5.15 enum . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    13
  5.16 fractions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   13
  5.17 glob . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    13
  5.18 importlib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   13
  5.19 io . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    13
  5.20 ipaddress . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   13
  5.21 itertools . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   13
  5.22 marshal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .     14
  5.23 math . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    14


                                                         1

====================================
End of whatsnew_toc.txt
====================================

